{
  "schemaVersion": "1.0.0",
  "readme": "README.md",
  "modules": [  
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-body/ZGBody.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-body>` is created dynamically by the ZingGrid library, and as such should not be manually added by the developer.  However the user can style `<zg-body>` using CSS.",
          "tagName": "ZGBody",
          "cssProperties": [
            {
              "name": "--zg-body-background",
              "description": "Styles the background of grid body",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "transparent"
            },
            {
              "name": "--zg-body-border",
              "description": "Styles the border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-body-border-bottom",
              "description": "Styles the bottom border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-border, 0)"
            },
            {
              "name": "--zg-body-border-left",
              "description": "Styles the left border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-border, 0)"
            },
            {
              "name": "--zg-body-border-right",
              "description": "Styles the right border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-border, 0)"
            },
            {
              "name": "--zg-body-border-top",
              "description": "Styles the top border of grid body. Note: If `--zg-row-border-top` set, it will override `--zg-body-border-top`.",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-border, 0)"
            },
            {
              "name": "--zg-body-color",
              "description": "Sets the font color of contents inside grid body",
              "syntax": "<color>",
              "default": "inherit"
            },
            {
              "name": "--zg-body-font-family",
              "description": "Sets the font family of contents inside grid body",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "inherit"
            },
            {
              "name": "--zg-body-font-size",
              "description": "Sets the font size of contents inside grid body",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-body-font-style",
              "description": "Sets the font style of contents inside grid body",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-body-font-weight",
              "description": "Sets the font weight of contents inside grid body",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-body-line-height",
              "description": "Sets the line-height of contents inside of grid body",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-body-card-background",
              "description": "Styles the background of grid body in 'card' layout-mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "linear-gradient(45deg, #f9fafb 20%, #fff)"
            },
            {
              "name": "--zg-body-card-border",
              "description": "Styles the border of grid body in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-body-card-border-bottom",
              "description": "Styles the bottom border of grid body in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-card-border, 0)"
            },
            {
              "name": "--zg-body-card-border-left",
              "description": "Styles the left border of grid body in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-card-border, 0)"
            },
            {
              "name": "--zg-body-card-border-right",
              "description": "Styles the right border of grid body in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-card-border, 0)"
            },
            {
              "name": "--zg-body-card-border-top",
              "description": "Styles the top border of grid body in 'card' layout-mode. Note: If `--zg-row-border-top` set in 'card' layout-mode it will override `--zg-body-border-top`.",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-body-card-border, 0)"
            },
            {
              "name": "--zg-body-card-display",
              "description": "Sets display of grid body in 'card' layout-mode",
              "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
              "default": "grid"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGBody",
          "declaration": {
            "name": "ZGBody",
            "module": "zinggrid-lib/src/js/components/zg-body/ZGBody.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-body",
          "declaration": {
            "name": "ZGBody",
            "module": "zinggrid-lib/src/js/components/zg-body/ZGBody.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-button/ZGButton.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "A custom, styled button that can be used both for internal grid-related action and for user-specific actions. It is stylable via CSS. Some buttons are automatically inserted when a feature that uses it enabled, like `pager`, while others are inserted manually by the user.",
          "tagName": "ZGButton",
          "attributes": [
            {
              "name": "action",
              "description": "Sets the action of the button",
              "type": "string"
            },
            {
              "name": "disabled",
              "description": "Presence of attribute determines if the button is disabled or not",
              "type": "boolean"
            },
            {
              "name": "icon",
              "description": "Sets the icon for the button",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-button-background",
              "description": "Styles the background of button",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border",
              "description": "Styles the border of a button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-bottom",
              "description": "Styles the bottom border of a button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-left",
              "description": "Styles the left border of a button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-right",
              "description": "Styles the right border of a button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-top",
              "description": "Styles the top border of a button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow",
              "description": "Styles the box-shadow of the button",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color",
              "description": "Sets the font color of button",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-font-family",
              "description": "Sets the font family of button",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "inherit"
            },
            {
              "name": "--zg-button-font-size",
              "description": "Sets the font size of button",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "90%"
            },
            {
              "name": "--zg-button-font-style",
              "description": "Sets the font style of button",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-button-font-weight",
              "description": "Sets the font weight of button",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-button-line-height",
              "description": "Sets the line height of button",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-button-margin",
              "description": "Sets the margin of button",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-button-padding",
              "description": "Sets the padding of button",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "3px"
            },
            {
              "name": "--zg-button-icon-background_hover",
              "description": "Styles the background of the icon in a button on hover state",
              "syntax": "<'background'>",
              "default": "#fff"
            },
            {
              "name": "--zg-button-background_hover",
              "description": "Styles the background of button on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border_hover",
              "description": "Styles the border of a button on hover state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-bottom_hover",
              "description": "Styles the bottom border of a button on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-left_hover",
              "description": "Styles the left border of a button on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-right_hover",
              "description": "Styles the right border of a button on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-top_hover",
              "description": "Styles the top border of a button on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_hover",
              "description": "Styles the box-shadow of the button on hover",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color_hover",
              "description": "Styles the color of the button on hover",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-transition_speed",
              "description": "Sets the transition speed of button",
              "syntax": "<single-transition>#",
              "default": "var(--theme-transition_speed)"
            },
            {
              "name": "--zg-button-background_focus",
              "description": "Styles the background of button on focus",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border_focus",
              "description": "Styles the border of a button on focus state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-bottom_focus",
              "description": "Styles the bottom border of a button on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-left_focus",
              "description": "Styles the left border of a button on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-right_focus",
              "description": "Styles the right border of a button on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-top_focus",
              "description": "Styles the top border of a button on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_hover",
              "description": "Styles the box-shadow of the button on hover",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color_focus",
              "description": "Styles the color of the button on focus",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-transition_speed",
              "description": "Sets the transition speed of button",
              "syntax": "<single-transition>#",
              "default": "var(--theme-transition_speed)"
            },
            {
              "name": "--zg-button-background_active",
              "description": "Styles of background of button on active state",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-background-color)"
            },
            {
              "name": "--zg-button-border_active",
              "description": "Styles the border of a button on active state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-bottom_active",
              "description": "Styles the bottom border of a button on active state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-left_active",
              "description": "Styles the left border of a button on active state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-right_active",
              "description": "Styles the right border of a button on active state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border-top_active",
              "description": "Styles the top border of a button on active state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_active",
              "description": "Styles the box-shadow of the button on activation",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color_active",
              "description": "Styles the color of the button on active state",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-opacity_disabled",
              "description": "Styles the opacity of disabled button or button on hover",
              "syntax": "<alpha-value>",
              "default": "0.2"
            },
            {
              "name": "--zg-button-background_custom",
              "description": "Styles the background of custom button",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border_custom",
              "description": "Styles the border of custom button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_custom",
              "description": "Applies a box shadow behind custom button",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-background_custom_focus",
              "description": "Styles the background of custom button on focus",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border_custom_focus",
              "description": "Styles the border of custom button on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_custom_focus",
              "description": "Applies a box shadow behind custom button on focus",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color_custom_focus",
              "description": "Sets the font color of custom button on focus",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-icon-background_custom_hover",
              "description": "Styles the background of icon in custom button on hover",
              "syntax": "<'background'>",
              "default": "#fff"
            },
            {
              "name": "--zg-button-background_custom_hover",
              "description": "Styles the background of custom button on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border_custom_hover",
              "description": "Styles the border of custom button on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_custom_hover",
              "description": "Applies a box shadow behing custom button on hover",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color_custom_hover",
              "description": "Sets the font color of custom button on hover",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-background_custom_active",
              "description": "Styles the background of custom button on active state",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-border_custom_active",
              "description": "Styles the border of custom button on active state",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-box-shadow_custom_active",
              "description": "Applies a box shadow behind custom button on active state",
              "syntax": "none | <shadow>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-button-color_custom_active",
              "description": "Sets the font color of custom button on active state",
              "syntax": "<color>",
              "default": "Browser's default value"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Button content."
            },
            {
              "name": "icon",
              "description": "Button icon. Replaces the default slot."
            },
            {
              "name": "label",
              "description": "Button label. Use to add a label when using the \"icon\" slot."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGButton",
          "declaration": {
            "name": "ZGButton",
            "module": "zinggrid-lib/src/js/components/zg-button/ZGButton.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-button",
          "declaration": {
            "name": "ZGButton",
            "module": "zinggrid-lib/src/js/components/zg-button/ZGButton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-caption/ZGCaption.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "A caption can be manually inserted inside the `<zing-grid>` tag as slotted content or automatically inserted when the `caption` is enabled.  `<zg-caption>` is stylable via CSS.",
          "tagName": "ZGCaption",
          "attributes": [
            {
              "name": "align",
              "description": "The alignment of content in the caption",
              "type": "string"
            },
            {
              "name": "position",
              "description": "Indicates where to position the caption",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-caption-background",
              "description": "Styles the background of caption",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-border",
              "description": "Styles the border of caption",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-caption-border-bottom",
              "description": "Styles the bottom border of caption",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-caption-border, 0)"
            },
            {
              "name": "--zg-caption-border-left",
              "description": "Styles the left border of caption",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-caption-border, 0)"
            },
            {
              "name": "--zg-caption-border-right",
              "description": "Styles the right border of caption",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-caption-border, 0)"
            },
            {
              "name": "--zg-caption-border-top",
              "description": "Styles the top border of caption",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-caption-border, 0)"
            },
            {
              "name": "--zg-caption-border-radius",
              "description": "Applies a border-radius to the caption",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "0"
            },
            {
              "name": "--zg-caption-box-shadow",
              "description": "Applies a box shadow behind caption",
              "syntax": "none | <shadow>#",
              "default": "none"
            },
            {
              "name": "--zg-caption-color",
              "description": "Sets the font color of caption",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-font-family",
              "description": "Sets the font family of caption",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-font-size",
              "description": "Sets the font size of caption",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "1.25rem"
            },
            {
              "name": "--zg-caption-font-style",
              "description": "Sets the font style of caption",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-font-weight",
              "description": "Sets the font weight of caption",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-margin",
              "description": "Sets the margin of caption",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-caption-opacity",
              "description": "Sets the opacity of caption",
              "syntax": "<alpha-value>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-padding",
              "description": "Sets the padding of caption",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0 var(--theme-padding_x)"
            },
            {
              "name": "--zg-caption-transition",
              "description": "Sets the transition of caption",
              "syntax": "<single-transition>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-align-items",
              "description": "Sets the vertical alignment of items (title and toolbar) in caption",
              "syntax": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
              "default": "center"
            },
            {
              "name": "--zg-caption-flex-direction",
              "description": "Sets the flex direction of items (title and toolbar) in caption",
              "syntax": "row | row-reverse | column | column-reverse",
              "default": "row"
            },
            {
              "name": "--zg-caption-height",
              "description": "Sets the height of caption",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-title-align-self",
              "description": "Sets vertical alignment of items in caption title",
              "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
              "default": "center"
            },
            {
              "name": "--zg-caption-title-flex",
              "description": "Sets how items are flexed in caption title",
              "syntax": "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
              "default": "0 1 auto"
            },
            {
              "name": "--zg-caption-title-font-family",
              "description": "Sets the font-family of caption title",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "inherit"
            },
            {
              "name": "--zg-caption-title-font-size",
              "description": "Sets the font size of caption title",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-caption-title-font-style",
              "description": "Sets the font style of caption title",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-caption-title-font-weight",
              "description": "Sets the font weight of caption title",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-caption-title-margin",
              "description": "Sets the margin of caption title",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-caption-title-padding",
              "description": "Sets the padding of caption title",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-caption-title-order",
              "description": "Sets the order of caption title with respect to caption toolbar",
              "syntax": "<integer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-title-text-align",
              "description": "Sets the text alignment of caption title",
              "syntax": "start | end | left | right | center | justify | match-parent",
              "default": "inherit"
            },
            {
              "name": "--zg-caption-title-transform",
              "description": "Sets the transform of caption title",
              "syntax": "none | <transform-list>",
              "default": "none"
            },
            {
              "name": "--zg-caption-title-width",
              "description": "Sets the width of caption title",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "100%"
            },
            {
              "name": "--zg-caption-toolbar-align-self",
              "description": "Sets vertical alignment of items in caption toolbar",
              "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-toolbar-bottom",
              "description": "Sets the position from bottom of caption toolbar. To apply, set --zg-caption-toolbar-position.",
              "syntax": "<length> | <percentage> | auto",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-toolbar-justify-content",
              "description": "Sets the horizontal alignment of contents in caption toolbar",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "flex-start"
            },
            {
              "name": "--zg-caption-toolbar-left",
              "description": "Sets the left of caption toolbar. To apply, set --zg-caption-toolbar-position.",
              "syntax": "<length> | <percentage> | auto",
              "default": "auto"
            },
            {
              "name": "--zg-caption-toolbar-margin",
              "description": "Sets the margin of caption toolbar",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-caption-toolbar-position",
              "description": "Sets the position of caption toolbar",
              "syntax": "static | relative | absolute | sticky | fixed",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-caption-toolbar-right",
              "description": "Sets the right of caption toolbar. To apply, set --zg-caption-toolbar-position.",
              "syntax": "<length> | <percentage> | auto",
              "default": "auto"
            },
            {
              "name": "--zg-caption-toolbar-top",
              "description": "Sets the top of caption toolbar. To apply, set --zg-caption-toolbar-position.",
              "syntax": "<length> | <percentage> | auto",
              "default": "auto"
            },
            {
              "name": "--zg-caption-toolbar-transform",
              "description": "Sets the transform of caption toolbar",
              "syntax": "none | <transform-list>",
              "default": "none"
            },
            {
              "name": "--zg-caption-toolbar-width",
              "description": "Sets the width of caption toolbar",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "auto"
            },
            {
              "name": "--zg-caption-button-background",
              "description": "Styles the background of button in caption",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-button-background)"
            },
            {
              "name": "--zg-caption-button-background_focus",
              "description": "Styles the background of button in caption when the button is in a `focus` state",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-caption-button-background, var(--zg-button-background))"
            },
            {
              "name": "--zg-caption-button-background_hover",
              "description": "Styles the background of button in caption when the button is in a `hover` state",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-caption-button-background, var(--zg-button-background))"
            },
            {
              "name": "--zg-caption-button-background_active",
              "description": "Styles the background of button in caption when the button is in an `active` state",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-caption-button-background, var(--zg-button-background))"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Caption title."
            },
            {
              "name": "message",
              "description": "Caption title. Use when using a feature that enables caption toolbar ([contextMenu], [search], [staticMenu])."
            },
            {
              "name": "tool",
              "description": "Caption toolbar, which is added to the rightmost of caption by default."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGCaption",
          "declaration": {
            "name": "ZGCaption",
            "module": "zinggrid-lib/src/js/components/zg-caption/ZGCaption.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-caption",
          "declaration": {
            "name": "ZGCaption",
            "module": "zinggrid-lib/src/js/components/zg-caption/ZGCaption.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-card/ZGCard.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The container for a card template that holds a custom template for card mode.  This custom template will be rendered per row.  `<zg-card>` can be styled via CSS or the `--zg-card-*` selectors.  Please reference the \"Template\" section for more details on templates.",
          "tagName": "ZGCard",
          "attributes": [
            {
              "name": "editor",
              "description": "Sets the custom editor",
              "type": "function"
            },
            {
              "name": "editor-template",
              "description": "Points to an external template element to be used as the template for the card's editor.",
              "type": "function"
            },
            {
              "name": "renderer",
              "description": "The return value of the method is set as the innerHTML of `<zg-card>`.  If nothing is returned, it will not change the currently rendered card. The method takes the paramters `data`, `domCard`, and `rowObject`.",
              "type": "function"
            },
            {
              "name": "renderer-template",
              "description": "Points to an external template element to be used as the template for the card's render.",
              "type": "function"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-cell-background_layout_card",
              "description": "Styles the background of cards in 'card' layout-mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-border_layout_card",
              "description": "Styles the border of cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-cell-border-bottom_layout_card",
              "description": "Styles the bottom border of cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-card-border, 0)"
            },
            {
              "name": "--zg-cell-border-left_layout_card",
              "description": "Styles the left border of cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-card-border, 0)"
            },
            {
              "name": "--zg-cell-border-right_layout_card",
              "description": "Styles the right border of cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-card-border, 0)"
            },
            {
              "name": "--zg-cell-border-top_layout_card",
              "description": "Styles the top border of cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-card-border, 0)"
            },
            {
              "name": "--zg-cell-color_layout_card",
              "description": "Sets the font color of cards in 'card' layout-mode",
              "syntax": "<color>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-family_layout_card",
              "description": "Sets the font family of cards in 'card' layout-mode",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-size_layout_card",
              "description": "Sets the font size of cards in 'card' layout-mode",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-style_layout_card",
              "description": "Sets the font family of cards in 'card' layout-mode",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-weight_layout_card",
              "description": "Sets the font weight of cards in 'card' layout-mode",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-height_layout_card",
              "description": "Sets the height of cards in 'card' layout-mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "auto"
            },
            {
              "name": "--zg-cell-line-height_layout_card",
              "description": "Sets the line height of cards in 'card' layout-mode",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-padding_layout_card",
              "description": "Sets the padding of cards in 'card' layout-mode",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--theme-padding_y) var(--theme-padding_x)"
            },
            {
              "name": "--zg-cell-transition_layout_card",
              "description": "Sets the transition of cards in 'card' layout-mode",
              "syntax": "<single-transition>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-word-break_layout_card",
              "description": "Sets the word break of items in cards in 'card' layout-mode",
              "syntax": "",
              "default": "break-all"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Card content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGCard",
          "declaration": {
            "name": "ZGCard",
            "module": "zinggrid-lib/src/js/components/zg-card/ZGCard.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-card",
          "declaration": {
            "name": "ZGCard",
            "module": "zinggrid-lib/src/js/components/zg-card/ZGCard.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-cell/ZGCell.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-cell>` is the container for a single cell; it corresponds to the `<td>` tag on an HTML table.  It is automatically inserted and should not  be placed directly in the user's HTML.  `<zg-cell>` can be styled via CSS.",
          "tagName": "ZGCell",
          "cssProperties": [
            {
              "name": "--zg-cell-background",
              "description": "Styles the background of cells",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-cell-background)"
            },
            {
              "name": "--zg-cell-background_layout_row",
              "description": "Styles the background of cells in 'row' layout-mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-cell-background)"
            },
            {
              "name": "--zg-cell-border",
              "description": "Styles the border of cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-cell-border-bottom",
              "description": "Styles the bottom border of cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border, 0)"
            },
            {
              "name": "--zg-cell-border_layout_row",
              "description": "Styles the border of cells in 'row' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border-bottom, var(--zg-cell-border, 0))"
            },
            {
              "name": "--zg-cell-border-bottom_layout_row",
              "description": "Styles the bottom border of cells in 'row' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border_layout_row, var(--zg-cell-border-bottom, var(--zg-cell-border, 0)))"
            },
            {
              "name": "--zg-cell-border-left",
              "description": "Styles the left border of cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border, 0)"
            },
            {
              "name": "--zg-cell-border-left_layout_row",
              "description": "Styles the left border of cells in 'row' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border_layout_row, var(--zg-cell-border-left, var(--zg-cell-border, 0)))"
            },
            {
              "name": "--zg-cell-border-right",
              "description": "Styles the right border of cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border, 0)"
            },
            {
              "name": "--zg-cell-border-right_layout_row",
              "description": "Styles the right border of cells in 'row' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border_layout_row, var(--zg-cell-border-right, var(--zg-cell-border, 0)))"
            },
            {
              "name": "--zg-cell-border-top",
              "description": "Styles the top border of cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border, 0)"
            },
            {
              "name": "--zg-cell-border-top_layout_row",
              "description": "Styles the top border of cells in 'row' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-border_layout_row, var(--zg-cell-border-top, var(--zg-cell-border, 0)))"
            },
            {
              "name": "--zg-cell-color",
              "description": "Styles font color of text in cells",
              "syntax": "<color>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-color_layout_row",
              "description": "Styles font color of text in cells in 'row' layout-mode",
              "syntax": "<color>",
              "default": "var(--zg-cell-color, inherit)"
            },
            {
              "name": "--zg-cell-font-family",
              "description": "Sets the font family in cells",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-family_layout_row",
              "description": "Sets the font family in cells in 'row' layout-mode",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "var(--zg-cell-font-family, inherit)"
            },
            {
              "name": "--zg-cell-font-size",
              "description": "Sets the font size in cells",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-size_layout_row",
              "description": "Sets the font size in cells in 'row' layout-mode",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "var(--zg-cell-font-size, inherit)"
            },
            {
              "name": "--zg-cell-font-style",
              "description": "Sets the font style in cells",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-style_layout_row",
              "description": "Sets the font style in cells in 'row' layout-mode",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "var(--zg-cell-font-style, inherit)"
            },
            {
              "name": "--zg-cell-font-weight",
              "description": "Sets the font weight in cells",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-font-weight_layout_row",
              "description": "Sets the font weight in cells in 'row' layout-mode",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "var(--zg-cell-font-weight, inherit)"
            },
            {
              "name": "--zg-cell-height",
              "description": "Sets height of cells",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "auto"
            },
            {
              "name": "--zg-cell-height_layout_row",
              "description": "Sets height of cells in 'row' layout-mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-cell-height, auto)"
            },
            {
              "name": "--zg-cell-line-height",
              "description": "Sets line height of cells",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-line-height_layout_row",
              "description": "Sets line height of cells in 'row' layout-mode",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "var(--zg-cell-line-height, inherit)"
            },
            {
              "name": "--zg-cell-padding",
              "description": "Sets padding of cells",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--theme-padding_y) var(--theme-padding_x)"
            },
            {
              "name": "--zg-cell-padding_layout_row",
              "description": "Sets padding of cells in 'row' layout-mode",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--zg-cell-padding, var(--theme-padding_y) var(--theme-padding_x))"
            },
            {
              "name": "--zg-cell-transition",
              "description": "Sets the transition of cells",
              "syntax": "<single-transition>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-transition_layout_row",
              "description": "Sets the transition of cells in 'row' layout-mode",
              "syntax": "<single-transition>#",
              "default": "var(--zg-cell-transition)"
            },
            {
              "name": "--zg-cell-vertical-align",
              "description": "Sets vertical alignment of items in cells",
              "syntax": "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
              "default": "middle"
            },
            {
              "name": "--zg-cell-vertical-align_layout_row",
              "description": "Sets vertical alignment of items in cells in 'row' layout-mode",
              "syntax": "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
              "default": "var(--zg-cell-vertical-align, middle)"
            },
            {
              "name": "--zg-cell-background_hover",
              "description": "Styles the background of cells on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-background_hover_layout_row",
              "description": "Styles the background of cells in 'row' layout-mode on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-cell-background_hover)"
            },
            {
              "name": "--zg-cell-color_hover",
              "description": "Styles font color of cells on hover",
              "syntax": "<color>",
              "default": "var(--zg-cell-color)"
            },
            {
              "name": "--zg-cell-color_hover_layout_row",
              "description": "Styles font color of cells in 'row' layout-mode on hover",
              "syntax": "<color>",
              "default": "var(--zg-cell-color_hover, var(--zg-cell-color))"
            },
            {
              "name": "--zg-cell-background_sorted",
              "description": "Styles the background of cells in sorted column",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-background_layout_row_sorted",
              "description": "Styles the background of cells in sorted column in 'row' layout-mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-cell-background_sorted)"
            },
            {
              "name": "--zg-cell-color_sorted",
              "description": "Sets the font color of cells in sorted column",
              "syntax": "<color>",
              "default": "var(--zg-cell-color)"
            },
            {
              "name": "--zg-cell-color_layout_row_sorted",
              "description": "Sets the font color of cells in sorted column in 'row' layout-mode",
              "syntax": "<color>",
              "default": "var(--zg-cell-color_sorted, var(--zg-cell-color))"
            },
            {
              "name": "--zg-cell-label-color_layout_card",
              "description": "Sets font color of label in cards in 'card' layout-mode",
              "syntax": "<color>",
              "default": "var(--theme-color-primary)"
            },
            {
              "name": "--zg-cell-label-display_layout_card",
              "description": "Sets the display of label in cards in 'card' layout-mode",
              "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
              "default": "flex"
            },
            {
              "name": "--zg-cell-label-font-size_layout_card",
              "description": "Sets font size of label in cards in 'card' layout-mode",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "85%"
            },
            {
              "name": "--zg-cell-label-margin_layout_card",
              "description": "Sets the margin of label in cards in 'card' layout-mode",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0 0 2px"
            },
            {
              "name": "--zg-cell-label-overflow_layout_card",
              "description": "Sets the overflow of label in cards in 'card' layout-mode",
              "syntax": "[ visible | hidden | clip | scroll | auto ]{1,2}",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-label-transform_layout_card",
              "description": "Sets transform of label in cards in 'card' layout-mode",
              "syntax": "none | <transform-list>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-label-font-weight_layout_card",
              "description": "Sets font weight of label in cards in 'card' layout-mode",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-cell-content-border_layout_card",
              "description": "Styles the border of card items in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-cell-content-border-bottom_layout_card",
              "description": "Styles the bottom border of card items in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-content-border_layout_card, 0)"
            },
            {
              "name": "--zg-cell-content-border-left_layout_card",
              "description": "Styles the left border of card items in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-content-border_layout_card, 0)"
            },
            {
              "name": "--zg-cell-content-border-right_layout_card",
              "description": "Styles the right border of card items in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-content-border_layout_card, 0)"
            },
            {
              "name": "--zg-cell-content-border-top_layout_card",
              "description": "Styles the top border of card items in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-cell-content-border_layout_card, 0)"
            },
            {
              "name": "--zg-cell-content-font-size_layout_card",
              "description": "Sets the font size of cards in 'card' layout-mode",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-cell-content-padding_layout_card",
              "description": "Sets the padding of cards in 'card' layout-mode",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "3px 0"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGCell",
          "declaration": {
            "name": "ZGCell",
            "module": "zinggrid-lib/src/js/components/zg-cell/ZGCell.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-cell",
          "declaration": {
            "name": "ZGCell",
            "module": "zinggrid-lib/src/js/components/zg-cell/ZGCell.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-checkbox/ZGCheckbox.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "A checkbox is automatically inserted when a feature that uses it is enabled, like `<zg-column type=\"selector\">`, or it can be manually-inserted to the grid. It can be styled via CSS.",
          "tagName": "ZGCheckbox",
          "attributes": [
            {
              "name": "checked",
              "description": "Presence of attribute determines if the checkbox is checked",
              "type": "boolean"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Checkbox label."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGCheckbox",
          "declaration": {
            "name": "ZGCheckbox",
            "module": "zinggrid-lib/src/js/components/zg-checkbox/ZGCheckbox.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-checkbox",
          "declaration": {
            "name": "ZGCheckbox",
            "module": "zinggrid-lib/src/js/components/zg-checkbox/ZGCheckbox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-colgroup/ZGColgroup.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-colgroup>` is a container for the columns of the grid specified by `<zg-column>` tags.   This element is similar in function to the `<colgroup>` tag in an HTML element.   Developers should always add this element to their grid structure; however, ZingGrid will insert it  automatically if it is omitted.  As an non-visual element, you should not apply style to this tag. Note: Omission of `<zg-colgroup>` may result in a slight performance delay for auto-insertion.",
          "tagName": "ZGColgroup",
          "slots": [
            {
              "name": "",
              "description": "Colgroup content that only accepts columns (ZGColumns)."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGColgroup",
          "declaration": {
            "name": "ZGColgroup",
            "module": "zinggrid-lib/src/js/components/zg-colgroup/ZGColgroup.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-colgroup",
          "declaration": {
            "name": "ZGColgroup",
            "module": "zinggrid-lib/src/js/components/zg-colgroup/ZGColgroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-column/ZGColumn.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-column>` tag is used to associate the columns of the grid to the values  in a dataset.  Attributes on the tag are used to configure both the data type, style, and function  of the grid column.  It is possible to build grids without explicit `<zg-column>` tags, and in that  case ZingGrid will add a column for each index in the dataset. However, developers are encouraged to  explore the features available with `<zg-column>` to utilize the powerful features ZingGrid has to offer.",
          "tagName": "ZGColumn",
          "attributes": [
            {
              "name": "align",
              "description": "Aligns the contents of the cell",
              "type": "'center' | 'left' | 'right'"
            },
            {
              "name": "array-index",
              "description": "If the index is an array of objects, use array-index to indicate which index of the array object to include",
              "type": "string"
            },
            {
              "name": "array-slice",
              "description": "If the index is an array, you can use array-slice to indicate which array indexes to include.",
              "type": "string | number"
            },
            {
              "name": "cell-break",
              "description": "The type of `word-break` style for body cells. When not set, `cell-break` style is `normal` by default. If the width of a column is set, `cell-break` is `word` by default.",
              "type": "'all' | 'ellipsis' | 'normal' | 'word'"
            },
            {
              "name": "cell-class",
              "description": "The class to be set directly on `<zg-cell>` within the column. `cell-class` applied to `<zg-column>` will overwrite the `cell-class` applied to `<zing-grid>`.",
              "type": "string"
            },
            {
              "name": "cell-tooltip-action",
              "description": "Sets the execution method of custom 'icon' type tooltips to either activate on hover or click of the icon",
              "type": "'click' | 'hover'"
            },
            {
              "name": "cell-tooltip-delay",
              "description": "Sets the hover delay in milliseconds before displaying the tooltip",
              "type": "number"
            },
            {
              "name": "cell-tooltip-icon",
              "description": "Specifies the icon to use for the cell tooltip trigger icon when using the info column type",
              "type": "string"
            },
            {
              "name": "cell-tooltip-position",
              "description": "Sets the tooltip-position for the cell",
              "type": "'top' | 'left' | 'right' | 'bottom'"
            },
            {
              "name": "cell-tooltip-renderer",
              "description": "Gets the name of the user's custom render function, on window, to use the function's return value as the tooltip content",
              "type": "string"
            },
            {
              "name": "cell-tooltip-template",
              "description": "Points to an external template element to be used as the template for the tooltip display",
              "type": "string"
            },
            {
              "name": "cell-tooltip-text",
              "description": "Sets the tooltip text for the cell of the column.  Can pass this value to renderer or template if using",
              "type": "string"
            },
            {
              "name": "cell-tooltip-type",
              "description": "Sets the style to use for the tooltips.  Uses the `default` style by default.  Can set to `system` to match the tooltips used on icons throughout `<zing-grid>`.",
              "type": "'default' | 'system'"
            },
            {
              "name": "content-style",
              "description": "When an additional HTML element is added to the renderer, as in the case of image and url, `content-style` will be put into a style attribute directly on the element.",
              "type": "string"
            },
            {
              "name": "content-width",
              "description": "Sets the width of the content inside of the cell. Used on cells of column type `element`, `iframe`, `image`, or `url`.",
              "type": "string | number"
            },
            {
              "name": "default-display",
              "description": "The data to display in each cell where the data value is null or undefined",
              "type": "string"
            },
            {
              "name": "details-renderer",
              "description": "Renderer for the details page of a column. To use a custom renderer, the attribute should be set to the name of the function. The renderer function takes in the following arguments, `value of index` (for each index), `domCell`, and `cellObject`. The returned value of the renderer function is set as the innerHTML of the details dialog.",
              "type": "string"
            },
            {
              "name": "details-template",
              "description": "Points to an external template element to be used as the template for the column's details",
              "type": "string"
            },
            {
              "name": "drag",
              "description": "Disables the drag state of a specific column when `column-drag` enabled on `<zing-grid>`",
              "type": "'disabled'"
            },
            {
              "name": "editor",
              "description": "Overrides the default editor for the column.  Can be set to a different built-in editor (based on type of column), custom editor, or `false` to turn off editor. If set to a custom editor, the attribute value should be set to the name of the object. See \"Features\" page on \"Editing: Custom Editor Grid\" for more details on custom editor.",
              "type": "string | function"
            },
            {
              "name": "editor-template",
              "description": "Points to an external template element to be used as the template for the column's editor",
              "type": "string"
            },
            {
              "name": "filter",
              "description": "Overrides the grid level `filter` attribute.  Presence of attribute enables on `filter` column, otherwise set to `disabled` to disable.",
              "type": "'disabled' | boolean"
            },
            {
              "name": "filter-index",
              "description": "Sets the data field index to filter on if index itself has multiple fields.  The value set in index is the default.",
              "type": "string"
            },
            {
              "name": "filter-key",
              "description": "Sets the key for server side filtering.  By default the filterKey is set to the filterIndex value.",
              "type": "string"
            },
            {
              "name": "foot-cell",
              "description": "The aggregate function, tokenized string, or function to evaluate for the foot cell of the column. If using a function, the function takes the parameters `columnData` and `columnFieldIndex`.",
              "type": "'sum' | 'avg' | 'max' | 'min' | 'count' | 'tokenized string' | 'functionName' | string"
            },
            {
              "name": "frozen",
              "description": "Moves the column to the frozen panel specified",
              "type": "'left' | 'right' | string"
            },
            {
              "name": "head-cell",
              "description": "The aggregate function to evaluate for the head cell of the column. If using a function, the function takes the parameters `columnData` and `columnFieldIndex`.",
              "type": "'sum' | 'avg' | 'max' | 'min' | 'count' | 'tokenized string' | 'functionName' | string"
            },
            {
              "name": "header",
              "description": "The header name for the column.   If it is not set, the default is to format the `index` value.",
              "type": "string"
            },
            {
              "name": "header-auto-format",
              "description": "Setting to `disabled` will turn off formatting on the header of the column.  By default, headers will convert camel, dash, or kebab case to a properly spaced and capitalized string.  Or set to a function name to customize formatting of header text.  The custom function takes in two parameters, `index` and `headerText`, and returns the formatted header text.",
              "type": "'disabled' | 'functionName' | string"
            },
            {
              "name": "header-tooltip-action",
              "description": "Sets the execution method of custom 'icon' type tooltips to either activate on hover or click of the icon",
              "type": "'click' | 'hover'"
            },
            {
              "name": "header-tooltip-delay",
              "description": "Sets the hover delay in milliseconds before displaying the header tooltip",
              "type": "number"
            },
            {
              "name": "header-tooltip-icon",
              "description": "Specifies the icon to use for the header tooltip trigger icon",
              "type": "string"
            },
            {
              "name": "header-tooltip-icon-position",
              "description": "Sets the tooltip icon position for the tooltip icon in the header cells",
              "type": "'left' | 'right' | 'after-text'"
            },
            {
              "name": "header-tooltip-position",
              "description": "Sets the tooltip-position for the header cell",
              "type": "'top' | 'left' | 'right' | 'bottom'"
            },
            {
              "name": "header-tooltip-renderer",
              "description": "Gets the name of the user's custom render function, on window, to use the function's return value as the tooltip content",
              "type": "string"
            },
            {
              "name": "header-tooltip-template",
              "description": "Points to an external template element to be used as the template for the tooltip display",
              "type": "string"
            },
            {
              "name": "header-tooltip-text",
              "description": "Sets the tooltip text for the header cell of the column.  Can pass this value to renderer or template if using",
              "type": "string"
            },
            {
              "name": "header-tooltip-trigger",
              "description": "Sets what part of the header triggers the tooltip.  If set to 'icon', an info icon is added to the header.",
              "type": "'text' | 'icon'"
            },
            {
              "name": "header-tooltip-type",
              "description": "Sets the style to use for the tooltips.  Uses the `default` style by default.  Can set to `system` to match the tooltips used on icons throughout `<zing-grid>`.",
              "type": "'default' | 'system'"
            },
            {
              "name": "hidden",
              "description": "Presence of attribute hides the column",
              "type": "boolean"
            },
            {
              "name": "index",
              "description": "A single index or multiple indices (separated by comma), to associate information in the data source  to a column in the grid.  Nested data keys are referenced by the member character `.` (Ex. data.key).",
              "type": "string"
            },
            {
              "name": "locale",
              "description": "Localization code used with column type `currency` and `number`",
              "type": "string"
            },
            {
              "name": "menu-text",
              "description": "The text to display in the control menu for the column.  If it is not set, it is set to the header text.",
              "type": "string"
            },
            {
              "name": "min-width",
              "description": "Sets the minimum width of the column in pixels",
              "type": "number"
            },
            {
              "name": "renderer",
              "description": "Overrides the default renderer for the column.  Can be set to a different built-in or custom renderer. To use a custom renderer, the attribute should be set to the name of the function. The renderer function takes in the following arguments, `value of index` (for each index), `domCell`, and `cellObject`. The returned value of the renderer function is set as the innerHTML of the cell.",
              "type": "string"
            },
            {
              "name": "renderer-template",
              "description": "Points to an external template element to be used as the template for the column's renderer",
              "type": "string"
            },
            {
              "name": "required",
              "description": "Indicates that the column is required to have a value on edit",
              "type": "boolean"
            },
            {
              "name": "resizable",
              "description": "Turns on column resizing for single column.  Set to `disabled` to turn off resizing on a single column.",
              "type": "'disabled'"
            },
            {
              "name": "resizable-max-width",
              "description": "Sets the maximum width the column can be set to when resizing",
              "type": "number"
            },
            {
              "name": "resizable-min-width",
              "description": "Sets the minimum width the column can be set to when resizing",
              "type": "number"
            },
            {
              "name": "resizablePersistent",
              "description": "Modifies the default column resizable persistence.  Set to `disabled` to turn off persistence on a single column.",
              "type": "boolean"
            },
            {
              "name": "search",
              "description": "Turns off the search on a column if `search` is present on `<zing-grid>`",
              "type": "'disabled'"
            },
            {
              "name": "separator",
              "description": "If multiple indices are set, this is the string that separates them in the display.  By default, it is a comma.",
              "type": "string"
            },
            {
              "name": "sort",
              "description": "Turns off the sort on a column if `sort` is present on `<zing-grid>`",
              "type": "'disabled'"
            },
            {
              "name": "sort-asc",
              "description": "Presence of attribute sorts the column data in ascending order",
              "type": "boolean"
            },
            {
              "name": "sort-desc",
              "description": "Presence of attribute sorts the column data in descending order",
              "type": "boolean"
            },
            {
              "name": "sort-intl",
              "description": "Overrides default behavior for setting special sort for international data",
              "type": "'disabled'"
            },
            {
              "name": "sorter",
              "description": "Overrides the default sorter for the column.  It is also possible to override the column sorting by passing in method name of sort function instead or setting to `disabled` to disable sorting.  Sorter function takes in two values (a, b) and returns 1, -1, or 0 indicating if `a > b`, `a < b`, or `a = b`. Can also be set to a path in the dataset to perform the sort on.  This is useful for sorting object indices.",
              "type": "string"
            },
            {
              "name": "type",
              "description": "The type of the data stored in the column.  The column renderer/editor will behave based on the column type.",
              "type": "'boolean' | 'button' | 'currency' | 'custom' | 'date' | 'duplicate' | 'editor' | 'element' | 'email' | 'icon' | 'image' | 'iframe' | 'number' | 'password' | 'range' | 'remover' | 'row-group' | 'row-number' | 'select' | 'selector' | 'tel' | 'text' | 'toggle' | 'url'"
            },
            {
              "name": "type-button-disabled",
              "description": "Presence of attribute sets the button to be in a disabled state. Can also set to \"true\" or \"false\".",
              "type": "boolean"
            },
            {
              "name": "type-button-handler",
              "description": "When the column type is set to `button`, use `typeButtonHander` to hook up a function call to the button click. Callback receives rowData, zg-cell DOM, and zg-cell object as arguments.",
              "type": "string"
            },
            {
              "name": "type-button-icon",
              "description": "When the column type is set to `button`, use `typeButtonIcon` to add an icon next to the rendered button in the cell",
              "type": "string"
            },
            {
              "name": "type-button-label",
              "description": "When the column type is set to `button`, use `typeButtonLabel` to add a label to the rendered button in the cell",
              "type": "string"
            },
            {
              "name": "type-button-url",
              "description": "When the column type is set to `button`, use `typeButtonURL` to add a shortcut handler on button click.  The click will automatically open the url in a new window.",
              "type": "string"
            },
            {
              "name": "type-checkbox-label",
              "description": "When the column type is set to `checkbox`, use `typeCheckboxLabel` to add a label next to the rendered checkbox in the cell",
              "type": "string"
            },
            {
              "name": "type-color-mode",
              "description": "Sets the color mode to configure the color picker. Choose between HSL, RGBA, and the default Hex.",
              "type": "string"
            },
            {
              "name": "type-color-preview",
              "description": "Disable the default color swatch UI preview with a false value.",
              "type": "boolean"
            },
            {
              "name": "type-currency",
              "description": "The currency to be used in currency formatting. Currency is set using using the 3 letter currency code specified by ISO 4217 specification (https://en.wikipedia.org/wiki/ISO_4217)",
              "type": "string"
            },
            {
              "name": "type-date-format",
              "description": "The tokenized formatting for a date column",
              "type": "string"
            },
            {
              "name": "type-date-from-now",
              "description": "Indicates if date should be displayed in FromNow format",
              "type": "boolean"
            },
            {
              "name": "type-element-attribute-name",
              "description": "Sets the attribute of the custom-element in the column when `<zg-column>` has `type` set to `element`",
              "type": "string"
            },
            {
              "name": "type-element-tag-name",
              "description": "Sets the tag to wrap content when `<zg-column>` has `type` set to `element`. If `type-element-attribute-name` isn't set, it will put the rendered data into the body of the element. If `type-element-attribute-name` is set, it will set the attribute to the indexed value.",
              "type": "string"
            },
            {
              "name": "type-group-hide-count",
              "description": "Presence of the attribute disables the display of the row count on the row-group column",
              "type": "boolean"
            },
            {
              "name": "type-iframe-ratio",
              "description": "Sets a `square` ratio instead of the default `16:9`",
              "type": "'square'"
            },
            {
              "name": "type-image-alt",
              "description": "The alternative text used with the `image` type column",
              "type": "string"
            },
            {
              "name": "type-image-mask",
              "description": "The alternative shape to mask the image",
              "type": "'circle'"
            },
            {
              "name": "type-image-src",
              "description": "If the column type is `image`, use the `type-image-src` attribute to set the src for the image.  The src will be the index value by default.",
              "type": "string"
            },
            {
              "name": "type-number-decimals",
              "description": "Indicates the exact numbers to display after the decimal",
              "type": "number"
            },
            {
              "name": "type-number-formatting",
              "description": "Set to \"disabled\" to turn off default number formatting",
              "type": "'disabled'"
            },
            {
              "name": "type-number-max-decimals",
              "description": "Indicates the maximum numbers to display after the decimal",
              "type": "number"
            },
            {
              "name": "type-number-min-decimals",
              "description": "Indicates the minimum numbers to display after the decimal",
              "type": "number"
            },
            {
              "name": "type-radio-options",
              "description": "When the column type is set to `radio`, use `typeRadioOptions` to add rendered radio options in the cell. Can also set as array of name/value pairs where the name is displayed for the given value",
              "type": "any[] | string"
            },
            {
              "name": "type-range-max",
              "description": "Maximum value for the input box. Used with the `range` type column in edit mode.",
              "type": "number"
            },
            {
              "name": "type-range-min",
              "description": "Minimum value for the input box.  Used with `range` type column in edit mode.",
              "type": "number"
            },
            {
              "name": "type-range-step",
              "description": "Specifies the step between each legal value for the input box.  Used with `range` type column in edit mode.",
              "type": "number"
            },
            {
              "name": "type-select-default-value",
              "description": "The default value of a new record.  The select box in the create record will default to the specified value.",
              "type": "string"
            },
            {
              "name": "type-select-multiple",
              "description": "In edit mode, presence of attribute allows column type `select` to have multiple selections, instead of the default of a single selection",
              "type": "boolean"
            },
            {
              "name": "type-select-options",
              "description": "To set the options for the select box for a `select` column when `editor` is enabled on `<zing-grid>`. Can also set as array of name/value pairs where the name is displayed for the given value",
              "type": "string | any[]"
            },
            {
              "name": "type-toggle-options",
              "description": "When the column type is set to `toggle`, use `typeToggleOptions` to set the list of options for the display.",
              "type": "any[]"
            },
            {
              "name": "type-toggle-render-value",
              "description": "When the column type is set, the render and value will be the same.  This prevents the default creating of true/false for toggles.",
              "type": "boolean"
            },
            {
              "name": "type-url-icon",
              "description": "If the column type is `url`, use this attribute to reference any `<zg-icon>` within the library to replace the link text with this icon.",
              "type": "'link' | 'outsidearrow'"
            },
            {
              "name": "type-url-src",
              "description": "If the column type is `url`, use the `type-url-src` attribute to set the src for the link.  The link will be the index value by default.",
              "type": "string"
            },
            {
              "name": "type-url-text",
              "description": "If the column type is `url`, use the `type-url-text` attribute to set the text displayed for the link.",
              "type": "string"
            },
            {
              "name": "validation-error-message",
              "description": "Sets the validation error message for the column.  Overrides any other settings.",
              "type": "string"
            },
            {
              "name": "validation-required-message",
              "description": "Sets the validation required message for the column.  Overrides any other settings.",
              "type": "string"
            },
            {
              "name": "validator",
              "description": "Sets the validation method for the column.  Overrides the default for the column type",
              "type": "string | function"
            },
            {
              "name": "visibility-priority",
              "description": "Used in the case of automatically removing columns on resize.  Columns without a `visibility-priority` never gets removed. The rest of the columns are removed from highest `visibility-priority` value to the lowest.",
              "type": "number"
            },
            {
              "name": "width",
              "description": "Sets the width of the column.",
              "type": "'fit' | 'fitheader' | 'fitcontent' | 'stretch' | '10%' | '150px' | '150' | string | number"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Custom column content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGColumn",
          "declaration": {
            "name": "ZGColumn",
            "module": "zinggrid-lib/src/js/components/zg-column/ZGColumn.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-column",
          "declaration": {
            "name": "ZGColumn",
            "module": "zinggrid-lib/src/js/components/zg-column/ZGColumn.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-control-bar/ZGControlBar.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-control-bar>` is inserted dynamically by the ZingGrid library and serves as a container for the grid's interface controls.  As a generated element, developers should not manually place `<zg-control-bar>` in their grid; however, they may style the bar and its internal elements using CSS.",
          "tagName": "ZGControlBar",
          "cssProperties": [
            {
              "name": "--zg-control-bar-background",
              "description": "Styles the background of control-bar",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-control-bar-border",
              "description": "Styles the border of control-bar",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-control-bar-border-bottom",
              "description": "Styles the bottom border of control-bar",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-control-bar-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-control-bar-border-left",
              "description": "Styles the left border of control-bar",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-control-bar-border, 0)"
            },
            {
              "name": "--zg-control-bar-border-right",
              "description": "Styles the right border of control-bar",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-control-bar-border, 0)"
            },
            {
              "name": "--zg-control-bar-border-top",
              "description": "Styles the top border of control-bar",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-control-bar-border, 0)"
            },
            {
              "name": "--zg-control-bar-margin",
              "description": "Sets the margin of control-bar",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-control-bar-min-height",
              "description": "Sets the min-height of control bar",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "30px"
            },
            {
              "name": "--zg-control-bar-visibility",
              "description": "Sets the visibility of component",
              "syntax": "visible | hidden | collapse",
              "default": "visible"
            },
            {
              "name": "--zg-control-bar-padding",
              "description": "Sets the padding of control-bar",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "2px var(--theme-padding_x) 2px calc(var(--theme-padding_x) - 6px)"
            },
            {
              "name": "--zg-control-bar-layout-justify-content",
              "description": "Sets the horizontal alignment of contents in inner layout container",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "flex-end"
            },
            {
              "name": "--zg-control-bar-layout-content",
              "description": "Sets the before 'content' of inner layout container",
              "syntax": "normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?",
              "default": "\"\""
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGControlBar",
          "declaration": {
            "name": "ZGControlBar",
            "module": "zinggrid-lib/src/js/components/zg-control-bar/ZGControlBar.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-control-bar",
          "declaration": {
            "name": "ZGControlBar",
            "module": "zinggrid-lib/src/js/components/zg-control-bar/ZGControlBar.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-data/ZGData.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-data>` tag is used to associate a dataset with the actual grid.   A top-level attribute is placed on `<zing-grid>` for basic cases, but when more fine grain  control is required, `<zg-data>`should be employed and various configuration values set via the  `options` attribute, or more appropriately via `<zg-param>` tags nested within the tag.",
          "tagName": "ZGData",
          "attributes": [
            {
              "name": "adapter",
              "description": "Adapter is a shortcut to set known options for specific third party datasets.  Currently supports `graphql` and  `firebase`. Developers could register their own custom adapters.  For more information on custom adapters, visit Guides > ZingGrid Object > registerAdapter().",
              "type": "string"
            },
            {
              "name": "data",
              "description": "Data for the grid presented as an array or object.  If set as an attribute value, the data needs to be in JSON format.",
              "type": "any"
            },
            {
              "name": "id-key",
              "description": "In the case of non-key based objects, the idKey can be set to indicate the id to send back to the datasource on CRUD commands. For example, if the READ URL was https://zinggrid-named.firebaseio.com/ then the UPDATE would be https://zinggrid-named.firebaseio.com/VALUE_OF_IDKEY.",
              "type": "string"
            },
            {
              "name": "options",
              "description": "Used to set `<zg-param>`, the configuration data for `<zg-data>`.  This should never be used directly as an attribute and is meant for object instantiation and for setting in JavaScript.",
              "type": "any"
            },
            {
              "name": "src",
              "description": "Specifies the absolute or relative URL to fetch data from to populate the grid",
              "type": "string"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Data content that only accepts data configuration options (ZGParams)."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGData",
          "declaration": {
            "name": "ZGData",
            "module": "zinggrid-lib/src/js/components/zg-data/ZGData.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-data",
          "declaration": {
            "name": "ZGData",
            "module": "zinggrid-lib/src/js/components/zg-data/ZGData.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-dialog/ZGDialog.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-dialog>` tag is used internally for dialogs used by  CRUD (Create, Read, Update, and Delete) actions, as well as to allow for custom dialogs to be created for generic use with the grid.  The design goal of the custom element is to extend HTML's `<dialog>` element for a consistent style and more data grid- related duties.",
          "tagName": "ZGDialog",
          "attributes": [
            {
              "name": "cancel",
              "description": "Callback method to call on custom dialog when the dialog's \"cancel\" button is clicked",
              "type": "string"
            },
            {
              "name": "confirm",
              "description": "Callback method to call on custom dialog when the dialog's \"confirm\" button is clicked",
              "type": "string"
            },
            {
              "name": "label",
              "description": "Sets the dialog's header 'label' text",
              "type": "string"
            },
            {
              "name": "open",
              "description": "The presence of the specification-standard `open` attribute designates whether the dialog is shown or hidden",
              "type": "string"
            }
          ],
          "cssParts": [
            {
              "name": "dialog",
              "description": "Dialog mask or overlay."
            },
            {
              "name": "form",
              "description": "Dialog form consisting of header, body, and footer."
            },
            {
              "name": "header",
              "description": "Dialog header consisting of header label and close button."
            },
            {
              "name": "header-label",
              "description": "Dialog header label."
            },
            {
              "name": "header-close",
              "description": "Dialog header close button."
            },
            {
              "name": "body",
              "description": "Dialog body."
            },
            {
              "name": "body-error",
              "description": "Dialog error message that appears top of dialog body."
            },
            {
              "name": "body-content-wrapper",
              "description": "Dialog content wrapper that wraps around editor labels and inputs."
            },
            {
              "name": "footer",
              "description": "Dialog footer consisting of footer buttons (cancel and confirm)."
            },
            {
              "name": "footer-cancel",
              "description": "Dialog footer cancel button."
            },
            {
              "name": "footer-confirm",
              "description": "Dialog footer confirm button."
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-dialog-background",
              "description": "Styles the background of dialog header",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "#fff"
            },
            {
              "name": "--zg-dialog-header-background",
              "description": "Styles the background of dialog header",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-dialog-background)"
            },
            {
              "name": "--zg-dialog-header-border",
              "description": "Styles the border of dialog header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-dialog-header-border-bottom",
              "description": "Styles the bottom border of dialog header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-header-border, 0)"
            },
            {
              "name": "--zg-dialog-header-border-left",
              "description": "Styles the left border of dialog header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-header-border, 0)"
            },
            {
              "name": "--zg-dialog-header-border-right",
              "description": "Styles the right border of dialog header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-header-border, 0)"
            },
            {
              "name": "--zg-dialog-header-border-top",
              "description": "Styles the top border of dialog header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-header-border, 0)"
            },
            {
              "name": "--zg-dialog-header-color",
              "description": "Sets the font folor of dialog header",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-dialog-header-margin",
              "description": "Sets the margin of dialog header",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-dialog-header-padding",
              "description": "Sets the padding of dialog header",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-dialog-body-background",
              "description": "Styles the background of dialog body",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-dialog-background)"
            },
            {
              "name": "--zg-dialog-body-border",
              "description": "Styles the border of dialog body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-dialog-body-border-bottom",
              "description": "Styles the bottom border of dialog body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-body-border, 0)"
            },
            {
              "name": "--zg-dialog-body-border-left",
              "description": "Styles the left border of dialog body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-body-border, 0)"
            },
            {
              "name": "--zg-dialog-body-border-right",
              "description": "Styles the right border of dialog body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-body-border, 0)"
            },
            {
              "name": "--zg-dialog-body-border-top",
              "description": "Styles the top border of dialog body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-body-border, 0)"
            },
            {
              "name": "--zg-dialog-body-margin",
              "description": "Sets the margin of dialog body",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "10px 0"
            },
            {
              "name": "--zg-dialog-body-padding",
              "description": "Sets the padding of dialog body",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-dialog-footer-background",
              "description": "Styles the background of dialog footer",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-dialog-background)"
            },
            {
              "name": "--zg-dialog-footer-border",
              "description": "Styles the border of dialog footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-dialog-footer-border-bottom",
              "description": "Styles the bottom border of dialog footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-footer-border, 0)"
            },
            {
              "name": "--zg-dialog-footer-border-left",
              "description": "Styles the left border of dialog footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-footer-border, 0)"
            },
            {
              "name": "--zg-dialog-footer-border-right",
              "description": "Styles the right border of dialog footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-footer-border, 0)"
            },
            {
              "name": "--zg-dialog-footer-border-top",
              "description": "Styles the top border of dialog footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-dialog-footer-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-dialog-footer-justify-content",
              "description": "Sets the horizontal alignment of contents in dialog footer",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "flex-end"
            },
            {
              "name": "--zg-dialog-footer-margin",
              "description": "Sets the margin of dialog footer",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "1.25rem 0 0"
            },
            {
              "name": "--zg-dialog-footer-padding",
              "description": "Sets the padding of dialog footer",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": ".875rem 0 0"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Dialog body content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGDialog",
          "declaration": {
            "name": "ZGDialog",
            "module": "zinggrid-lib/src/js/components/zg-dialog/ZGDialog.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-dialog",
          "declaration": {
            "name": "ZGDialog",
            "module": "zinggrid-lib/src/js/components/zg-dialog/ZGDialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-editor-row/ZGEditorRow.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-editor-row>` holds the details of the edit mode for the grid. `<zg-editor-row>` is created internally and should not be placed directly in the user's HTML.",
          "tagName": "ZGEditorRow",
          "cssProperties": [
            {
              "name": "--zg-editor-row-input-background",
              "description": "Styles the background of editor row",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "#f5f5f5"
            },
            {
              "name": "--zg-editor-row-input-border",
              "description": "Styles the border of editor row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid rgba(82, 168, 236, 0.8)"
            },
            {
              "name": "--zg-editor-row-input-border-bottom",
              "description": "Styles the bottom border of editor row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-editor-row-input-border, 1px solid rgba(82, 168, 236, 0.8))"
            },
            {
              "name": "--zg-editor-row-input-border-left",
              "description": "Styles the left border of editor row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-editor-row-input-border, 0)"
            },
            {
              "name": "--zg-editor-row-input-border-right",
              "description": "Styles the right border of editor row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-editor-row-input-border, 0)"
            },
            {
              "name": "--zg-editor-row-input-border-top",
              "description": "Styles the top border of editor row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-editor-row-input-border, 0)"
            },
            {
              "name": "--zg-editor-row-input-color",
              "description": "Sets the font color of editor row",
              "syntax": "<color>",
              "default": "var(--zg-editor-row-input-color, #fff)"
            },
            {
              "name": "--zg-editor-row-input-padding",
              "description": "Sets the padding of editor row",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "12px 15px"
            },
            {
              "name": "--zg-editor-row-input-background_focus",
              "description": "Styles the background of editor row input on focus",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-lighter)"
            },
            {
              "name": "--zg-editor-row-input-box-shadow_focus",
              "description": "Applies a box shadow behind editor row input on focus",
              "syntax": "none | <shadow>#",
              "default": "inset 0 0 5px #ccc"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGEditorRow",
          "declaration": {
            "name": "ZGEditorRow",
            "module": "zinggrid-lib/src/js/components/zg-editor-row/ZGEditorRow.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-editor-row",
          "declaration": {
            "name": "ZGEditorRow",
            "module": "zinggrid-lib/src/js/components/zg-editor-row/ZGEditorRow.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-filter/ZGFilter.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-filter>` is the container for a single cell when the cell contains a filter. `<zg-filter>` is created internally and should not be placed directly in the user's HTML; however, the user can style the `<zg-filter>` using the `zg-filter` selector.",
          "tagName": "ZGFilter",
          "attributes": [
            {
              "name": "cellindex",
              "description": "The index of the cell with the filter",
              "type": "number"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-filter-background",
              "description": "Styles the background of filter",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-border",
              "description": "Styles the border of filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-filter-border-bottom",
              "description": "Styles the bottom border of filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-border, 0)"
            },
            {
              "name": "--zg-filter-border-left",
              "description": "Styles the left border of filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-border, 0)"
            },
            {
              "name": "--zg-filter-border-right",
              "description": "Styles the right border of filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-border, 0)"
            },
            {
              "name": "--zg-filter-border-top",
              "description": "Styles the top border of filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-filter-color",
              "description": "Sets the font color of text inputted in filter",
              "syntax": "<color>",
              "default": "var(--theme-color_alt)"
            },
            {
              "name": "--zg-filter-height",
              "description": "Sets the height of filter",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-padding",
              "description": "Sets the padding of the filter",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "A cell's left and right padding"
            },
            {
              "name": "--zg-filter-background_sorted",
              "description": "Styles the background color of filter when the column in sorted",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-background",
              "description": "Styles the background of input field in filter",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-border",
              "description": "Styles the border of input field in filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-filter-input-border-bottom",
              "description": "Styles the bottom border of input field in filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-left",
              "description": "Styles the left border of input field in filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-right",
              "description": "Styles the right border of input field in filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-top",
              "description": "Styles the top border of input field in filter",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-radius",
              "description": "Applies a border radius to filter input",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-color",
              "description": "Styles the font color of text in input field of filter",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-font-size",
              "description": "Sets the font size of filter input",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-height",
              "description": "Sets the height of input field in filter. May need to set --zg-filter-height if input field is height is larger than height of filter.",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "20px"
            },
            {
              "name": "--zg-filter-input-margin",
              "description": "Sets the margin of filter input",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0 var(--theme-padding_x)"
            },
            {
              "name": "--zg-filter-input-padding",
              "description": "Sets the padding of input field in filter. . May need to set --zg-filter-height if input field is height is larger than height of filter.",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0 0 0 5px"
            },
            {
              "name": "--zg-filter-input-background_sorted",
              "description": "Styles the background of input field in filter when sorted",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-border_sorted",
              "description": "Styles the border of input field in filter when sorted",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-filter-input-border-bottom_sorted",
              "description": "Styles the bottom border of input field in filter when sorted",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-left_sorted",
              "description": "Styles the left border of input field in filter when sorted",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-right_sorted",
              "description": "Styles the right border of input field in filter when sorted",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-top_sorted",
              "description": "Styles the top border of input field in filter when sorted",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-filter-input-border)"
            },
            {
              "name": "--zg-filter-input-border-radius_sorted",
              "description": "Applies border radius to filter input when sorted",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-input-color_sorted",
              "description": "Styles the font color of text in input field of filter when sorted",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-select-color",
              "description": "Styles the font color of text in the select dropdown filter",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-select-font-size",
              "description": "Sets the font size of the select dropdown filter",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-select-height",
              "description": "Sets the height of the select dropdown filter",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-select-margin",
              "description": "Sets the margin of the select dropdown filter",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-filter-select-margin",
              "description": "Sets the width of the select dropdown filter",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "Browser's default value"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGFilter",
          "declaration": {
            "name": "ZGFilter",
            "module": "zinggrid-lib/src/js/components/zg-filter/ZGFilter.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-filter",
          "declaration": {
            "name": "ZGFilter",
            "module": "zinggrid-lib/src/js/components/zg-filter/ZGFilter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-focus/ZGFocus.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-focus>` element is a generated element added to `<zing-grid>` when the `selector` attribute is defined.  It is used as a container for the focus of cell(s)  and used as a CSS target for styling by the developer.  It should not be accessed specifically beyond styling.",
          "tagName": "ZGFocus",
          "cssProperties": [
            {
              "name": "--zg-focus-border",
              "description": "Styles the border of cells on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "2px solid var(--theme-color-primary)"
            },
            {
              "name": "--zg-focus-border-bottom",
              "description": "Sets the bottom border of cells on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-focus-border, 2px solid var(--theme-color-primary))"
            },
            {
              "name": "--zg-focus-bottom-transform",
              "description": "Sets the transform of bottom border of cells on focus",
              "syntax": "none | <transform-list>",
              "default": "none"
            },
            {
              "name": "--zg-focus-border-left",
              "description": "Sets the left border of cells on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-focus-border, 2px solid var(--theme-color-primary))"
            },
            {
              "name": "--zg-focus-left-transform",
              "description": "Sets the transform of left border of cells on focus",
              "syntax": "none | <transform-list>",
              "default": "none"
            },
            {
              "name": "--zg-focus-border-right",
              "description": "Sets the right border of cells on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-focus-border, 2px solid var(--theme-color-primary))"
            },
            {
              "name": "--zg-focus-right-transform",
              "description": "Sets the transform of right border of cells on focus",
              "syntax": "none | <transform-list>",
              "default": "none"
            },
            {
              "name": "--zg-focus-border-top",
              "description": "Sets the top border of cells on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-focus-border, 2px solid var(--theme-color-primary))"
            },
            {
              "name": "--zg-focus-top-transform",
              "description": "Sets the transform of top border of cells on focus",
              "syntax": "none | <transform-list>",
              "default": "none"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGFocus",
          "declaration": {
            "name": "ZGFocus",
            "module": "zinggrid-lib/src/js/components/zg-focus/ZGFocus.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-focus",
          "declaration": {
            "name": "ZGFocus",
            "module": "zinggrid-lib/src/js/components/zg-focus/ZGFocus.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-foot/ZGFoot.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-foot>` tag contains the foot cells (`<zg-foot-cell>`) of the data  grid specified via the `foot-cell` attribute found on `<zg-column>` tags.  The tag roughly corresponds to the idea of the `<tfoot>` tag used in HTML tables.  The `<zg-foot>` tag is  generated by the library and should not be placed in a grid manually by a developer, but instead is used as a styling target for CSS.",
          "tagName": "ZGFoot",
          "cssProperties": [
            {
              "name": "--zg-foot-background",
              "description": "Styles the background of grid foot",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-foot-border",
              "description": "Styles the border of grid foot",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-foot-border-bottom",
              "description": "Styles the bottom border of grid foot",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-foot-border, 0)"
            },
            {
              "name": "--zg-foot-border-left",
              "description": "Styles the left border of grid foot",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-foot-border, 0)"
            },
            {
              "name": "--zg-foot-border-right",
              "description": "Styles the right border of grid foot",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-foot-border, 0)"
            },
            {
              "name": "--zg-foot-border-top",
              "description": "Styles the top border of grid foot",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-foot-border, 0)"
            },
            {
              "name": "--zg-foot-height",
              "description": "Sets the height of grid foot",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "auto"
            },
            {
              "name": "--zg-foot-padding",
              "description": "Sets the padding of grid foot",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGFoot",
          "declaration": {
            "name": "ZGFoot",
            "module": "zinggrid-lib/src/js/components/zg-foot/ZGFoot.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-foot",
          "declaration": {
            "name": "ZGFoot",
            "module": "zinggrid-lib/src/js/components/zg-foot/ZGFoot.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-footer/ZGFooter.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-footer>` cell is a simple container element for content placed at the bottom of a grid.   It may contain `<zg-caption>` or `<zg-source>`, but also may contain arbitrarily defined elements inserted by the  developer.  The element and its contents are stylable directly using CSS.",
          "tagName": "ZGFooter",
          "cssProperties": [
            {
              "name": "--zg-footer-background",
              "description": "Styles the background of footer",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "0"
            },
            {
              "name": "--zg-footer-border-bottom",
              "description": "Styles the bottom border of footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-footer-border, 0)"
            },
            {
              "name": "--zg-footer-border-left",
              "description": "Styles the left border of footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-footer-border, 0)"
            },
            {
              "name": "--zg-footer-border-right",
              "description": "Styles the right border of footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-footer-border, 0)"
            },
            {
              "name": "--zg-footer-border-top",
              "description": "Styles the top border of footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-footer-border, 0)"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Footer content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGFooter",
          "declaration": {
            "name": "ZGFooter",
            "module": "zinggrid-lib/src/js/components/zg-footer/ZGFooter.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-footer",
          "declaration": {
            "name": "ZGFooter",
            "module": "zinggrid-lib/src/js/components/zg-footer/ZGFooter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-frozen-colgroup/ZGFrozenColgroup.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-frozen-colgroup>` element is used to define the frozen columns.   `<zg-frozen-colgroup>` is created internally and should not be placed directly in the user's HTML; however, the user can style the `<zg-frozen-colgroup>` using the `zg-frozen-colgroup` selector.",
          "tagName": "ZGFrozenColgroup"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGFrozenColgroup",
          "declaration": {
            "name": "ZGFrozenColgroup",
            "module": "zinggrid-lib/src/js/components/zg-frozen-colgroup/ZGFrozenColgroup.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-frozen-colgroup",
          "declaration": {
            "name": "ZGFrozenColgroup",
            "module": "zinggrid-lib/src/js/components/zg-frozen-colgroup/ZGFrozenColgroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-head/ZGHead.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-head>` tag contains the head cells (`<zg-head-cell>`) of the data grid specified via the `head-cell` attribute found on `<zg-column>` tags.  The tag roughly corresponds to the idea of the `<thead>` tag used in HTML tables.  The `<zg-head>` tag is generated by the library and should not be placed in a grid manually by a developer. Instead, it is used as a styling target for CSS.",
          "tagName": "ZGHead",
          "cssProperties": [
            {
              "name": "--zg-head-background",
              "description": "Styles the background of grid head rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-border",
              "description": "Styles the border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-head-border-bottom",
              "description": "Styles the bottom border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-head-border-left",
              "description": "Styles the left border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-border, 0)"
            },
            {
              "name": "--zg-head-border-right",
              "description": "Styles the right border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-border, 0)"
            },
            {
              "name": "--zg-head-border-top",
              "description": "Styles the top border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-border)"
            },
            {
              "name": "--zg-head-visibility",
              "description": "Sets the visibility of grid head rows",
              "syntax": "visible | hidden | collapse",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-row-head-background",
              "description": "Styles the background of grid head rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-head-background)"
            },
            {
              "name": "--zg-row-head-border",
              "description": "Styles the border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-border-bottom, var(--zg-row-border, var(--zg-row-border, 0)))"
            },
            {
              "name": "--zg-row-head-border-bottom",
              "description": "Styles the bottom border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-head-border, var(--zg-row-border-bottom, var(--zg-row-border, var(--zg-row-border, 0))))"
            },
            {
              "name": "--zg-row-head-border-left",
              "description": "Styles the left border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-head-border, var(--zg-row-border-left, var(--zg-row-border, var(--zg-row-border, 0))))"
            },
            {
              "name": "--zg-row-head-border-right",
              "description": "Styles the right border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-head-border, var(--zg-row-border-right, var(--zg-row-border, var(--zg-row-border, 0))))"
            },
            {
              "name": "--zg-row-head-border-top",
              "description": "Styles the top border of grid head rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-head-border, var(--zg-row-border-top, var(--zg-row-border, var(--zg-row-border, 0))))"
            },
            {
              "name": "--zg-row-head-color",
              "description": "Styles the font color of grid head rows",
              "syntax": "<color>",
              "default": "var(--zg-row-color)"
            },
            {
              "name": "--zg-row-head-background_hover",
              "description": "Styles the background of grid head rows on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-row-head-color_hover",
              "description": "Styles the font color of grid head rows on hover",
              "syntax": "<color>",
              "default": "var(--zg-row-color_hover)"
            },
            {
              "name": "--zg-row-head-background_even",
              "description": "Styles the background of 'even' grid head rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-head-background, var(--zg-head-background))"
            },
            {
              "name": "--zg-row-head-color_even",
              "description": "Styles the font color of 'even' grid head rows",
              "syntax": "<color>",
              "default": "var(--zg-row-head-color, var(--zg-row-color))"
            },
            {
              "name": "--zg-row-head-height_even",
              "description": "Sets the height of 'even' grid head rows",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-row-head-height, var(--zg-row-height))"
            },
            {
              "name": "--zg-row-head-background_even_hover",
              "description": "Styles the background of 'even' grid head rows on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-head-background_hover, var(--zg-head-background_hover))"
            },
            {
              "name": "--zg-row-head-color_even_hover",
              "description": "Styles the font color of 'even' grid head rows on hover",
              "syntax": "<color>",
              "default": "var(--zg-row-head-color_hover, var(--zg-row-color_hover, var(--zg-row-color)))"
            },
            {
              "name": "--zg-row-head-background_odd",
              "description": "Styles the background of 'odd' grid head rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-head-background, var(--zg-head-background))"
            },
            {
              "name": "--zg-row-head-color_odd",
              "description": "Sets the font color of 'odd' grid head rows",
              "syntax": "<color>",
              "default": "var(--zg-row-head-color, var(--zg-row-color))"
            },
            {
              "name": "--zg-row-head-height_odd",
              "description": "Sets the height of 'odd' grid head rows",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-row-head-height, var(--zg-row-height))"
            },
            {
              "name": "--zg-row-head-background_odd_hover",
              "description": "Styles the background of 'odd' grid head rows on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-head-background_hover, var(--zg-head-background_hover))"
            },
            {
              "name": "--zg-row-head-color_odd_hover",
              "description": "Styles the font color of 'odd' grid head rows on hover",
              "syntax": "<color>",
              "default": "var(--zg-row-head-color_hover, var(--zg-row-color_hover, var(--zg-row-color)))"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGHead",
          "declaration": {
            "name": "ZGHead",
            "module": "zinggrid-lib/src/js/components/zg-head/ZGHead.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-head",
          "declaration": {
            "name": "ZGHead",
            "module": "zinggrid-lib/src/js/components/zg-head/ZGHead.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-head-cell/ZGHeadCell.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-head-cell>` contains header information for a column and is roughly equivalent to the `<th>`  tag used for HTML tables.  The `<zg-head-cell>` tag is generated by the library and should not be placed in a grid  manually by a developer. It can be used as a styling target for CSS.",
          "tagName": "ZGHeadCell",
          "cssProperties": [
            {
              "name": "--zg-head-cell-background",
              "description": "Styles the background of head cells",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "transparent"
            },
            {
              "name": "--zg-head-cell-border",
              "description": "Styles the border of head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-head-cell-border-bottom",
              "description": "Styles the bottom border of head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border, 0)"
            },
            {
              "name": "--zg-head-cell-border-left",
              "description": "Styles the left border of head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border, 0)"
            },
            {
              "name": "--zg-head-cell-border-right",
              "description": "Styles the right border of head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border, 0)"
            },
            {
              "name": "--zg-head-cell-border-top",
              "description": "Styles the top border of head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border, 0)"
            },
            {
              "name": "--zg-head-cell-color",
              "description": "Sets the font color of head cells",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-font-family",
              "description": "Sets the font family of head cells",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-font-size",
              "description": "Sets the font size of head cells",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-font-weight",
              "description": "Sets the font weight of head cells",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-padding",
              "description": "Sets the padding of head cells",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-transition",
              "description": "Sets the transition of head cells",
              "syntax": "<single-transition>#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-background_hover",
              "description": "Styles the background of head cells on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-head-cell-background"
            },
            {
              "name": "--zg-head-cell-color_hover",
              "description": "Sets the font color of head cells on hover",
              "syntax": "<color>",
              "default": "var(--zg-head-cell-color)"
            },
            {
              "name": "--zg-head-cell-parent-background",
              "description": "Styles the background of parent head cells",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-head-cell-background)"
            },
            {
              "name": "--zg-head-cell-parent-border",
              "description": "Styles the border of parent head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border-bottom, var(--zg-head-cell-border, 1px solid var(--theme-border-color)))"
            },
            {
              "name": "--zg-head-cell-parent-border-bottom",
              "description": "Styles the bottom border of parent head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-parent-border, var(--zg-head-cell-border-bottom, var(--zg-head-cell-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-head-cell-parent-border-left",
              "description": "Styles the left border of parent head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-parent-border, var(--zg-head-cell-border-left, var(--zg-head-cell-border)))"
            },
            {
              "name": "--zg-head-cell-parent-border-right",
              "description": "Styles the right border of parent head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-parent-border, var(--zg-head-cell-border-right, var(--zg-head-cell-border)))"
            },
            {
              "name": "--zg-head-cell-parent-border-top",
              "description": "Styles the top border of parent head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-parent-border, var(--zg-head-cell-border-top, var(--zg-head-cell-border)))"
            },
            {
              "name": "--zg-head-cell-parent-color",
              "description": "Sets the font color of parent head cells",
              "syntax": "<color>",
              "default": "var(--zg-head-cell-color)"
            },
            {
              "name": "--zg-head-cell-parent-font-size",
              "description": "Sets the font-size of parent head cells",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "var(--zg-head-cell-font-size)"
            },
            {
              "name": "--zg-head-cell-parent-font-weight",
              "description": "Sets the font weight of parent head cells",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "var(--zg-h -cell-font-weight)"
            },
            {
              "name": "--zg-head-cell-parent-padding",
              "description": "Sets the padding of parent head cells",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--zg-head-cell-padding)"
            },
            {
              "name": "--zg-head-cell-parent-background_hover",
              "description": "Styles the background of parent head cells on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-head-cell-background_hover)"
            },
            {
              "name": "--zg-head-cell-parent-color_hover",
              "description": "Sets the font color of parent head cells on hover",
              "syntax": "<color>",
              "default": "var(--zg-head-cell-color_hover, var(--zg-head-cell-color))"
            },
            {
              "name": "--zg-head-cell-background_sorted",
              "description": "Styles the background of sorted head cells",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "inherit"
            },
            {
              "name": "--zg-head-cell-border_sorted",
              "description": "Styles the border of sorted head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-head-cell-border-bottom_sorted",
              "description": "Styles the bottom border of sorted head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border_sorted, 0)"
            },
            {
              "name": "--zg-head-cell-border-left_sorted",
              "description": "Styles the left border of sorted head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border_sorted, 0)"
            },
            {
              "name": "--zg-head-cell-border-right_sorted",
              "description": "Styles the right border of sorted head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border_sorted, 0)"
            },
            {
              "name": "--zg-head-cell-border-top_sorted",
              "description": "Styles the top border of sorted head cells",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border_sorted, 0)"
            },
            {
              "name": "--zg-head-cell-color_sorted",
              "description": "Sets the font color of sorted head cells",
              "syntax": "<color>",
              "default": "var(--zg-head-cell-color)"
            },
            {
              "name": "--zg-head-cell-background_sorted_hover",
              "description": "Styles the background of sorted head cells on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-head-cell-background_sorted, inherit)"
            },
            {
              "name": "--zg-head-cell-border-bottom_sorted_hover",
              "description": "Styles the bottom border of sorted head cells on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border-bottom_sorted, var(--zg-head-cell-border_sorted, 0))"
            },
            {
              "name": "--zg-head-cell-border-left_sorted_hover",
              "description": "Styles the left border of sorted head cells on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-head-cell-border-left_sorted, var(--zg-head-cell-border_sorted, 0))"
            },
            {
              "name": "--zg-head-cell-color_sorted_hover",
              "description": "Sets the font color of sorted head cells on hover",
              "syntax": "<color>",
              "default": "var(--zg-head-cell-color_sorted, var(--zg-head-cell-color))"
            },
            {
              "name": "--zg-head-cell-justify-content",
              "description": "Sets the horizontal alignment of contents in head cells",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-icon-margin",
              "description": "Sets the margin of child icons in head cells",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-icon-margin",
              "description": "Sets the margin of child icons in head cells",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-head-cell-icon-color_sorted",
              "description": "Sets the fill color of icon in sorted head cells",
              "syntax": "<'background'>",
              "default": "var(--theme-color)"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGHeadCell",
          "declaration": {
            "name": "ZGHeadCell",
            "module": "zinggrid-lib/src/js/components/zg-head-cell/ZGHeadCell.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-head-cell",
          "declaration": {
            "name": "ZGHeadCell",
            "module": "zinggrid-lib/src/js/components/zg-head-cell/ZGHeadCell.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-header/ZGHeader.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-header>` is the semantic container placed at the top of the grid to hold various grid items.  `<zg-header>` is created internally and should not be placed directly in the user's HTML.  The element can be styled via CSS.",
          "tagName": "ZGHeader",
          "cssProperties": [
            {
              "name": "--zg-header-background",
              "description": "Styles the background of header",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-header-border",
              "description": "Styles the border of header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-header-border-bottom",
              "description": "Styles the bottom border of header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-header-border, 0)"
            },
            {
              "name": "--zg-header-border-left",
              "description": "Styles the left border of header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-header-border, 0)"
            },
            {
              "name": "--zg-header-border-right",
              "description": "Styles the right border of header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-header-border, 0)"
            },
            {
              "name": "--zg-header-border-top",
              "description": "Styles the top border of header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-header-border, 0)"
            },
            {
              "name": "--zg-header-border-radius",
              "description": "Applies border radius to header",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "0"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGHeader",
          "declaration": {
            "name": "ZGHeader",
            "module": "zinggrid-lib/src/js/components/zg-header/ZGHeader.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-header",
          "declaration": {
            "name": "ZGHeader",
            "module": "zinggrid-lib/src/js/components/zg-header/ZGHeader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-icon/ZGIcon.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-icon>` is used to display custom ZingGrid icons within the grid.   The icon is set by its name, but can have a different look based on the grid's theme.   `<zg-icon>` is created internally when a feature that uses it is enabled, like `pager`,  but can be included in the grid manually as long as the name attribute exists.",
          "tagName": "ZGIcon",
          "attributes": [
            {
              "name": "name",
              "description": "Sets the icon type of `<zg-icon>`",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-icon-height",
              "description": "Sets the height of icon. Also set width using --zg-icon-width to scale icon.",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-icon-width",
              "description": "Sets the width of icon. Also set height using --zg-icon-height to scale icon.",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-icon-init-fill",
              "description": "Sets fill color of icon when element has [init] attribute. This indicates that column is sortable. The [init] is removed when column is sorted.",
              "syntax": "<'background'>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-icon-color",
              "description": "Sets the fill color of icon",
              "syntax": "<'background'>",
              "default": "var(--theme-color-primary)"
            }
          ],
          "slots": [
            {
              "name": "icon",
              "description": "Icon content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGIcon",
          "declaration": {
            "name": "ZGIcon",
            "module": "zinggrid-lib/src/js/components/zg-icon/ZGIcon.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-icon",
          "declaration": {
            "name": "ZGIcon",
            "module": "zinggrid-lib/src/js/components/zg-icon/ZGIcon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-input/ZGInput.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-input>` contains input fields with added ZingGrid-specific functionality. The specific functionality can be set via the `action` attribute.",
          "tagName": "ZGInput",
          "attributes": [
            {
              "name": "action",
              "description": "The built-in behavior and display of the input.  Gets and sets the associated grid property.",
              "type": "string"
            },
            {
              "name": "type",
              "description": "The type of the input if not using a built-in action",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The value of the input",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-input-height",
              "description": "Sets the height of input field",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "28px"
            },
            {
              "name": "--zg-input-width",
              "description": "Sets the width of input field",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "28px"
            },
            {
              "name": "--zg-input-background",
              "description": "Styles the background of input field",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "#fff"
            },
            {
              "name": "--zg-input-border",
              "description": "Styles the border of input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-input-border-bottom",
              "description": "Styles the bottom border of input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-input-border-left",
              "description": "Styles the left border of input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-input-border-right",
              "description": "Styles the right border of input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-input-border-top",
              "description": "Styles the top border of input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-input-border-radius",
              "description": "Applies a border radius to the input",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-input-box-shadow",
              "description": "Applies a box shadow behind input field",
              "syntax": "none | <shadow>#",
              "default": "none"
            },
            {
              "name": "--zg-input-color",
              "description": "Sets the font color of input field",
              "syntax": "<color>",
              "default": "var(--zing-grid-color, var(--theme-color))"
            },
            {
              "name": "--zg-input-font-family",
              "description": "Sets the font family of input field",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "inherit"
            },
            {
              "name": "--zg-input-font-size",
              "description": "Sets the font size of input field",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-input-font-style",
              "description": "Sets the font style of input field",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-input-font-weight",
              "description": "Sets the font weight of input field",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-input-line-height",
              "description": "Sets the line height of input field",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-input-margin",
              "description": "Sets the margin of input field",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-input-padding",
              "description": "Sets the padding of input field",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0 6px"
            },
            {
              "name": "--zg-input-text-align",
              "description": "Sets the text alignment of input field",
              "syntax": "start | end | left | right | center | justify | match-parent",
              "default": "center"
            },
            {
              "name": "--zg-input-transform",
              "description": "Sets the transform of input field",
              "syntax": "none | <transform-list>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-input-border_focus",
              "description": "Styles the border of input field on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid rgba(82, 168, 236, 0.8)"
            },
            {
              "name": "--zg-input-border-bottom_focus",
              "description": "Styles the bottom border of input field on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border_focus, 1px solid rgba(82, 168, 236, 0.8))"
            },
            {
              "name": "--zg-input-border-left_focus",
              "description": "Styles the left border of input field on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border_focus, )))"
            },
            {
              "name": "--zg-input-border-right_focus",
              "description": "Styles the right border of input field in modal on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border_focus, )))"
            },
            {
              "name": "--zg-input-border-top_focus",
              "description": "Styles the top border of input field in modal on focus",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-input-border_focus, )))"
            },
            {
              "name": "--zg-input-color_focus",
              "description": "Sets the font color of input field in modal on focus",
              "syntax": "<color>",
              "default": "var(--zg-input-color)"
            },
            {
              "name": "--zg-input-font-size_focus",
              "description": "Sets the font size of input field on focus",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-input-transform_focus",
              "description": "Sets the transform of input field in modal on focus",
              "syntax": "none | <transform-list>",
              "default": "Browser's default value"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Content after input field."
            },
            {
              "name": "input",
              "description": "Content before input field."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGInput",
          "declaration": {
            "name": "ZGInput",
            "module": "zinggrid-lib/src/js/components/zg-input/ZGInput.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-input",
          "declaration": {
            "name": "ZGInput",
            "module": "zinggrid-lib/src/js/components/zg-input/ZGInput.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-layout-controls/ZGLayoutControls.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "Allows you to switch between normal row mode and condensed card mode for the grid.   `<zg-layout-controls>` is created internally and should not be placed directly in the user's HTML; however, the user can style the `<zg-layout-controls>` using the `zg-layout-controls` selector.",
          "tagName": "ZGLayoutControls"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGLayoutControls",
          "declaration": {
            "name": "ZGLayoutControls",
            "module": "zinggrid-lib/src/js/components/zg-layout-controls/ZGLayoutControls.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-layout-controls",
          "declaration": {
            "name": "ZGLayoutControls",
            "module": "zinggrid-lib/src/js/components/zg-layout-controls/ZGLayoutControls.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-load-mask/ZGLoadMask.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-load-mask>` element is used to define the loading overlay that displays on top of the grid before the grid is completely rendered.  The element is generally dynamically created,  though it is possible to manually define it for a complex loading screen. Define a simple message and use CSS to style the element.",
          "tagName": "ZGLoadMask",
          "cssProperties": [
            {
              "name": "--zg-load-mask-color",
              "description": "Sets the font color of the loading text",
              "syntax": "<color>",
              "default": "#fff"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Loading mask content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGLoadMask",
          "declaration": {
            "name": "ZGLoadMask",
            "module": "zinggrid-lib/src/js/components/zg-load-mask/ZGLoadMask.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-load-mask",
          "declaration": {
            "name": "ZGLoadMask",
            "module": "zinggrid-lib/src/js/components/zg-load-mask/ZGLoadMask.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-menu/ZGMenu.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-menu>` element is a container for a custom menu for ZingGrid  used as a context or static (aka \"Hamburger\") menu.  The element is generally dynamically  inserted by the library, though the developer can append of overwrite menu with custom  entries.  The element can be styled using CSS.",
          "tagName": "ZGMenu",
          "attributes": [
            {
              "name": "replace",
              "description": "Presence of attribute replaces the default context menu with a custom menu. If `replace` is not set, the custom menu will be appended to the end of the default menu.",
              "type": "boolean"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-menu-background",
              "description": "Styles background of menu dropdown",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's defaul value"
            },
            {
              "name": "--zg-menu-border",
              "description": "Styles the border of menu dropdown",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-menu-border-bottom",
              "description": "Styles the bottom border of menu dropdown",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-menu-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-menu-border-left",
              "description": "Styles the left border of menu dropdown",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-menu-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-menu-border-right",
              "description": "Styles the right border of menu dropdown",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-menu-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-menu-border-top",
              "description": "Styles the top border of menu dropdown",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-menu-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-menu-box-shadow",
              "description": "Applies a box shadow to menu dropdown",
              "syntax": "none | <shadow>#",
              "default": "0 3px 3px #ccc"
            },
            {
              "name": "--zg-menu-font-size",
              "description": "Sets the font size of menu dropdown",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "0.8rem"
            },
            {
              "name": "--zg-menu-padding",
              "description": "Sets the padding of menu dropdown",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Menu content. Overwrites default menu when `[replace]` is present, else appends to the end of the default menu. Accepts ZGMenuGroup, ZGMenuItem, and ZGSeparator to construct custom menu."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGMenu",
          "declaration": {
            "name": "ZGMenu",
            "module": "zinggrid-lib/src/js/components/zg-menu/ZGMenu.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-menu",
          "declaration": {
            "name": "ZGMenu",
            "module": "zinggrid-lib/src/js/components/zg-menu/ZGMenu.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-menu-group/ZGMenuGroup.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "A group wrapper for multiple menu items found in the context  menu.  ZingGrid dynamically creates this element to hold various `<zg-menu-item>`  tags together for organizational purposes.  As it is a visual element, it can be  styled via CSS.",
          "tagName": "ZGMenuGroup",
          "slots": [
            {
              "name": "zgMenuGroupLabel",
              "description": "Menu group label."
            },
            {
              "name": "zgMenuGroupItems",
              "description": "Menu group items that only accepts menu items (ZGMenuItems)."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGMenuGroup",
          "declaration": {
            "name": "ZGMenuGroup",
            "module": "zinggrid-lib/src/js/components/zg-menu-group/ZGMenuGroup.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-menu-group",
          "declaration": {
            "name": "ZGMenuGroup",
            "module": "zinggrid-lib/src/js/components/zg-menu-group/ZGMenuGroup.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-menu-item/ZGMenuItem.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "This element defines a single menu item in ZingGrid's context  menu defined by `<zg-menu>`.  The element is typically dynamically generated, though  it can be overwritten by a user's own custom `<zg-menu-item>` elements.  The  element can be styled via CSS.",
          "tagName": "ZGMenuItem",
          "cssProperties": [
            {
              "name": "--zg-menu-item-background",
              "description": "Styles the background of menu item",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-menu-background)"
            },
            {
              "name": "--zg-menu-item-border",
              "description": "Styles the border of menu item",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-menu-border)"
            },
            {
              "name": "--zg-menu-item-border-bottom",
              "description": "Styles the bottom border of menu item",
              "syntax": "",
              "default": "var(--zg-menu-border-bottom, var(--zg-menu-item-border, var(--zg-menu-border)))"
            },
            {
              "name": "--zg-menu-item-border-left",
              "description": "Styles the left border of menu item",
              "syntax": "",
              "default": "var(--zg-menu-border-left, var(--zg-menu-item-border, var(--zg-menu-border)))"
            },
            {
              "name": "--zg-menu-item-border-right",
              "description": "Styles the border-right of menu item",
              "syntax": "",
              "default": "var(--zg-menu-border-right, var(--zg-menu-item-border, var(--zg-menu-border)))"
            },
            {
              "name": "--zg-menu-item-border-top",
              "description": "Styles the border-top of menu item",
              "syntax": "",
              "default": "var(--zg-menu-border-top, var(--zg-menu-item-border, var(--zg-menu-border)))"
            },
            {
              "name": "--zg-menu-item-color",
              "description": "Styles the color of menu item",
              "syntax": "<color>",
              "default": "var(--zg-menu-color)"
            },
            {
              "name": "--zg-menu-item-display",
              "description": "Styles the display of menu item",
              "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
              "default": "inline-flex"
            },
            {
              "name": "--zg-menu-item-padding",
              "description": "Sets the padding of menu item",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "2px 9px"
            },
            {
              "name": "--zg-menu-item-background_hover",
              "description": "Styles the background of menu item on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-menu-item-background, var(--zg-menu-background))"
            },
            {
              "name": "--zg-menu-item-border_hover",
              "description": "Styles the border of menu item on hover",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-menu-item-border, var(--zg-menu-border))"
            },
            {
              "name": "--zg-menu-item-border-bottom_hover",
              "description": "Styles the bottom border of menu item on hover",
              "syntax": "",
              "default": "var(--zg-menu-item-border_hover, var(--zg-menu-item-border-bottom, var(--zg-menu-border-bottom, var(--zg-menu-item-border, var(--zg-menu-border)))))"
            },
            {
              "name": "--zg-menu-item-border-left_hover",
              "description": "Styles the left border of menu item on hover",
              "syntax": "",
              "default": "var(--zg-menu-item-border_hover, var(--zg-menu-item-border-left, var(--zg-menu-border-left, var(--zg-menu-item-border, var(--zg-menu-border)))))"
            },
            {
              "name": "--zg-menu-item-border-right_hover",
              "description": "Styles the right border of menu item on hover",
              "syntax": "",
              "default": "var(--zg-menu-item-border_hover, var(--zg-menu-item-border-right, var(--zg-menu-border-right, var(--zg-menu-item-border, var(--zg-menu-border)))))"
            },
            {
              "name": "--zg-menu-item-border-top_hover",
              "description": "Styles the top border of menu item on hover",
              "syntax": "",
              "default": "var(--zg-menu-item-border_hover, var(--zg-menu-item-border-top, var(--zg-menu-border-top, var(--zg-menu-item-border, var(--zg-menu-border)))))"
            },
            {
              "name": "--zg-menu-item-color_hover",
              "description": "Styles the color of menu item on hover",
              "syntax": "<color>",
              "default": "var(--zg-menu-item-color, var(--zg-menu-color))"
            },
            {
              "name": "--zg-menu-item-justify-content_hover",
              "description": "Sets the horizontal alignment of contents in menu item on hover",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "var(--zg-menu-item-justify-content, flex-start)"
            },
            {
              "name": "--zg-menu-item-padding_hover",
              "description": "Sets the padding of menu item on hover",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--zg-menu-item-padding, 2px 9px)"
            },
            {
              "name": "--zg-menu-item-justify-content",
              "description": "Sets the horizontal alignment of contents in menu item",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "flex-start"
            },
            {
              "name": "--zg-menu-item-justify-content_hover",
              "description": "Sets the horizontal alignment of contents in menu item on hover",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "var(--zg-menu-item-justify-content, flex-start)"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Menu item content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGMenuItem",
          "declaration": {
            "name": "ZGMenuItem",
            "module": "zinggrid-lib/src/js/components/zg-menu-item/ZGMenuItem.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-menu-item",
          "declaration": {
            "name": "ZGMenuItem",
            "module": "zinggrid-lib/src/js/components/zg-menu-item/ZGMenuItem.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-no-data/ZGNoData.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-no-data>` is used to display a message when there are no records.  The  element internally wraps any text in a `<div role=\"any\">` tag.  The element is stylable with CSS like most ZingGrid elements.",
          "tagName": "ZGNoData",
          "cssProperties": [
            {
              "name": "--zg-no-data-background",
              "description": "Styles the background of empty message when in `<zg-header>`",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-light)"
            },
            {
              "name": "--zg-no-data-border",
              "description": "Styles the border of empty message when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-no-data-border-bottom",
              "description": "Styles the bottom border of empty message when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-no-data-border, 0)"
            },
            {
              "name": "--zg-no-data-border-left",
              "description": "Styles the left border of empty message when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-no-data-border, 0)"
            },
            {
              "name": "--zg-no-data-border-right",
              "description": "Styles the right border of empty message when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-no-data-border, 0)"
            },
            {
              "name": "--zg-no-data-border-top",
              "description": "Styles the top border of empty message when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-no-data-border, 1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-no-data-border-radius",
              "description": "Styles the border radius of empty message",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "0"
            },
            {
              "name": "--zg-no-data-color",
              "description": "Sets the font color content inside of empty message when in `<zg-header>`",
              "syntax": "<color>",
              "default": "var(--theme-font-size)"
            },
            {
              "name": "--zg-no-data-font-size",
              "description": "Sets the font size of empty message",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-no-data-font-style",
              "description": "Sets the font style of empty message",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-no-data-font-weight",
              "description": "Sets the font weight of empty message",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-no-data-line-height",
              "description": "Setes the line height of empty message",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-no-data-min-height",
              "description": "Sets the min-height of empty message",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "auto"
            },
            {
              "name": "--zg-no-data-padding",
              "description": "Sets the padding of empty message",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--zg-cell-height, var(--theme-padding_x, auto))) var(--theme-padding_x)"
            },
            {
              "name": "--zg-no-data-text-align",
              "description": "Sets text alignment of content inside of empty message",
              "syntax": "start | end | left | right | center | justify | match-parent",
              "default": "left"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "No data content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGNoData",
          "declaration": {
            "name": "ZGNoData",
            "module": "zinggrid-lib/src/js/components/zg-no-data/ZGNoData.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-no-data",
          "declaration": {
            "name": "ZGNoData",
            "module": "zinggrid-lib/src/js/components/zg-no-data/ZGNoData.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-pager/ZGPager.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "An element that contains the UI controls for paging through a grid's dataset.  The  element can be manually placed, though it is more often dynamically inserted when paging is enabled via  the `pager` attribute on the `<zing-grid>` tag.  The element can be styled via CSS.",
          "tagName": "ZGPager",
          "attributes": [
            {
              "name": "page-size",
              "description": "Sets the number of records or rows to display per page",
              "type": "number"
            },
            {
              "name": "page-size-card",
              "description": "Sets the number of cards to display per page when in card mode",
              "type": "number"
            },
            {
              "name": "page-size-row",
              "description": "Sets the number of rows to display per page when in row mode",
              "type": "number"
            },
            {
              "name": "pagerButtonLimit",
              "description": "Determines max number of page buttons to display.  Default is 5.",
              "type": "number"
            },
            {
              "name": "pagerType",
              "description": "Determines which type of pagination to use, input or buttons",
              "type": "string"
            },
            {
              "name": "position",
              "description": "Indicates where to position the pager",
              "type": "string"
            },
            {
              "name": "size-options",
              "description": "Sets the options for page size in `zg-option-list`",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-pager-background",
              "description": "Styles the background of pager",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-pager-border",
              "description": "Styles the border of pager",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-pager-border-bottom",
              "description": "Styles the bottom border of pager",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border, 0)"
            },
            {
              "name": "--zg-pager-border-left",
              "description": "Styles the left border of pager",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border, 0)"
            },
            {
              "name": "--zg-pager-border-right",
              "description": "Styles the right border of pager",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border, 0)"
            },
            {
              "name": "--zg-pager-border-top",
              "description": "Styles the top border of pager",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border)"
            },
            {
              "name": "--zg-pager-box-shadow",
              "description": "Applies a box shadow behind the pager",
              "syntax": "none | <shadow>#",
              "default": "0"
            },
            {
              "name": "--zg-pager-color",
              "description": "Sets the color of pager text",
              "syntax": "<color>",
              "default": "var(--zing-grid-color), var(--theme-color)"
            },
            {
              "name": "--zg-pager-font-size",
              "description": "Sets the font size of pager text",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-pager-margin",
              "description": "Sets the margin of pager",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-pager-height",
              "description": "Sets the minimum height of pager",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "1px"
            },
            {
              "name": "--zg-pager-padding",
              "description": "Sets the padding of pager",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0 var(--theme-padding_x)"
            },
            {
              "name": "--zg-pager-child-margin",
              "description": "Sets the margin of pager items",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0 5px"
            },
            {
              "name": "--zg-pager-background_button",
              "description": "Styles the background of pager buttons in 'button-pagination` mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-primary)"
            },
            {
              "name": "--zg-pager-border_button",
              "description": "Styles the bottom border of pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-pager-border-bottom_button",
              "description": "Styles the bottom border of pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button)"
            },
            {
              "name": "--zg-pager-border-left_button",
              "description": "Styles the left border of pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button)"
            },
            {
              "name": "--zg-pager-border-right_button",
              "description": "Styles the right border of pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button)"
            },
            {
              "name": "--zg-pager-border-top_button",
              "description": "Styles the top border of pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button)"
            },
            {
              "name": "--zg-pager-border-radius_button",
              "description": "Applies border radius to the pager buttons in 'button-pagination' mode",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "50%"
            },
            {
              "name": "--zg-pager-color_button",
              "description": "Sets the color of pager buttons in 'button-pagination' mode",
              "syntax": "<color>",
              "default": "26px"
            },
            {
              "name": "--zg-pager-height_button",
              "description": "Sets the height of pager buttons in 'button-pagination' mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "26px"
            },
            {
              "name": "--zg-pager-width_button",
              "description": "Sets the width of pager buttons in 'button-pagination' mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "26px"
            },
            {
              "name": "--zg-pager-background_button_active",
              "description": "Styles the background of active pager buttons in 'button-pagination` mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-primary)"
            },
            {
              "name": "--zg-pager-border_button_active",
              "description": "Styles the bottom border of active pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-pager-border-bottom_button_active",
              "description": "Styles the bottom border of active pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button_active)"
            },
            {
              "name": "--zg-pager-border-left_button_active",
              "description": "Styles the left border of active pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button_active)"
            },
            {
              "name": "--zg-pager-border-right_button_active",
              "description": "Styles the right border of active pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button_active)"
            },
            {
              "name": "--zg-pager-border-top_button_active",
              "description": "Styles the top border of active pager buttons in 'button-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-pager-border_button_active)"
            },
            {
              "name": "--zg-pager-border-radius_button_active",
              "description": "Applies border radius to the pager next/previous buttons in 'button-pagination' mode",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "50%"
            },
            {
              "name": "--zg-pager-color_button_active",
              "description": "Sets the color of pager buttons in 'button-pagination' mode",
              "syntax": "<color>",
              "default": "26px"
            },
            {
              "name": "--zg-pager-height_button_active",
              "description": "Sets the height of active pager buttons in 'button-pagination' mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "26px"
            },
            {
              "name": "--zg-pager-width_button_active",
              "description": "Sets the width of active pager buttons in 'button-pagination' mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "26px"
            },
            {
              "name": "--zg-pager-background_cursor",
              "description": "Styles the background of pager next/previous buttons in 'cursor-pagination` mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-primary)"
            },
            {
              "name": "--zg-pager-border-bottom_cursor",
              "description": "Styles the bottom border of pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-pager-border-left_cursor",
              "description": "Styles the left border of pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-pager-border-right_cursor",
              "description": "Styles the right border of pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-pager-border-top_cursor",
              "description": "Styles the top border of pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-pager-border-radius_cursor",
              "description": "Applies border radius to the pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "50%"
            },
            {
              "name": "--zg-pager-height_cursor",
              "description": "Sets the height of pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "21px"
            },
            {
              "name": "--zg-pager-width_cursor",
              "description": "Sets the width of pager next/previous buttons in 'cursor-pagination' mode",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "21px"
            },
            {
              "name": "--zg-pager-text-margin",
              "description": "Sets the margin of pager text",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0 2px"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Pager content. If used with the other pager slot, the content is placed beneath the other slots."
            },
            {
              "name": "left",
              "description": "Pager content placed in the left."
            },
            {
              "name": "center",
              "description": "Pager content placed in the center."
            },
            {
              "name": "right",
              "description": "Pager content placed in the right."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGPager",
          "declaration": {
            "name": "ZGPager",
            "module": "zinggrid-lib/src/js/components/zg-pager/ZGPager.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-pager",
          "declaration": {
            "name": "ZGPager",
            "module": "zinggrid-lib/src/js/components/zg-pager/ZGPager.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-param/ZGParam.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-param>` is a non-visual element used to pass the configuration options for the `<zg-data>`  element more cleanly via `name`-`value` pairs.  The element is not required, though it is preferred, as everything set  within a `<zg-param>` element can also be set directly on `<zg-data>` via the `config` attribute.  Developers should note  that when setting complex values for the `value` attribute to use JSON encoded values.  Also, as a non-visual element,  CSS styling does not apply to `<zg-param>`.",
          "tagName": "ZGParam",
          "attributes": [
            {
              "name": "name",
              "description": "Name of parameter",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The value for given data key.  If the value is an object, format as JSON encoded version of string.",
              "type": "string"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGParam",
          "declaration": {
            "name": "ZGParam",
            "module": "zinggrid-lib/src/js/components/zg-param/ZGParam.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-param",
          "declaration": {
            "name": "ZGParam",
            "module": "zinggrid-lib/src/js/components/zg-param/ZGParam.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-row/ZGRow.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-row>` is the container for the `<zg-cell>`, `<zg-head-cell>`, and `<zg-filter>` elements. It corresponds to the `<tr>` tag on an HTML table. The `<zg-row>` element is created dynamically and should not be placed in the grid by a developer.   However, the element is useful for styling the various rows of the grid using CSS.",
          "tagName": "ZGRow",
          "cssProperties": [
            {
              "name": "--zg-row-card-grid-gap",
              "description": "Sets the gap between cards in 'card' layout-mode",
              "syntax": "<'row-gap'> <'column-gap'>?",
              "default": "10px"
            },
            {
              "name": "--zg-row-body-background",
              "description": "Styles the background of body rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-row-body-border",
              "description": "Styles the border of body rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-body-border, var(--zg-row-border-bottom, var(--zg-row-border, 0)))"
            },
            {
              "name": "--zg-row-body-border-bottom",
              "description": "Styles the bottom border of body rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-body-border, var(--zg-row-border-bottom, var(--zg-row-border, 0)))"
            },
            {
              "name": "--zg-row-body-border-left",
              "description": "Styles the left border of body rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-body-border, var(--zg-row-border-left, var(--zg-row-border, 0)))"
            },
            {
              "name": "--zg-row-body-border-right",
              "description": "Styles the right border of body rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-body-border, var(--zg-row-border-right, var(--zg-row-border), 0))"
            },
            {
              "name": "--zg-row-body-border-top",
              "description": "Styles the top border of body rows",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-body-border, var(--zg-row-border-top, var(--zg-row-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-body-color",
              "description": "Sets the font color of body rows",
              "syntax": "<color>",
              "default": "var(--zg-row-color)"
            },
            {
              "name": "--zg-row-body-background_hover",
              "description": "Styles the background of body rows on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-row-body-color_hover",
              "description": "Styles the font color of body rows",
              "syntax": "<color>",
              "default": "var(--zg-row-color_hover, var(--zg-row-color))"
            },
            {
              "name": "--zg-row-body-background_even",
              "description": "Styles the background of 'even' body rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-body-background)"
            },
            {
              "name": "--zg-row-body-color_even",
              "description": "Sets the font color of 'even' body rows",
              "syntax": "<color>",
              "default": "var(--zg-row-body-color, var(--zg-row-color))"
            },
            {
              "name": "--zg-row-height",
              "description": "Sets the height of all rows",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-row-body-height",
              "description": "Sets the height of body rows",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-row-height)"
            },
            {
              "name": "--zg-row-body-height_even",
              "description": "Sets the height of 'even' body rows",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-row-body-height, var(--zg-row-height))"
            },
            {
              "name": "--zg-row-body-background_even_hover",
              "description": "Styles the background of 'even' body rows on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-body-background_hover)"
            },
            {
              "name": "--zg-row-body-color_even_hover",
              "description": "Styles the font color of 'even' body rows on hover",
              "syntax": "<color>",
              "default": "var(--zg-row-body-color_hover, var(--zg-row-color_hover, var(--zg-row-color)))"
            },
            {
              "name": "--zg-row-body-background_odd",
              "description": "Styles the background of 'odd' body rows",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-body-background)"
            },
            {
              "name": "--zg-row-body-color_odd",
              "description": "Styles the font color of 'odd' body rows",
              "syntax": "<color>",
              "default": "var(--zg-row-body-color, var(--zg-row-color))"
            },
            {
              "name": "--zg-row-body-height_odd",
              "description": "Sets the height of 'odd' body rows",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-row-body-height, var(--zg-row-height))"
            },
            {
              "name": "--zg-row-body-background_odd_hover",
              "description": "Styles the background of 'odd' body rows on hover",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-body-background_hover)"
            },
            {
              "name": "--zg-row-body-color_odd_hover",
              "description": "Sets the font color of 'odd' body rows on hover",
              "syntax": "<color>",
              "default": "var(--zg-row-body-color_hover, var(--zg-row-color_hover, var(--zg-row-color)))"
            },
            {
              "name": "--zg-row-card-padding",
              "description": "Sets the padding of cards in 'card' layout-mode when '[internal-card-header]' not added to '<zing-grid>'",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "10px 0 5px"
            },
            {
              "name": "--zg-row-card-background_odd",
              "description": "Styles the background of cards in 'card' layout-mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-card-background, var(--zg-row-body-background_odd, var(--zg-row-body-background, #fff)))"
            },
            {
              "name": "--zg-row-card-border_odd",
              "description": "Styles the border of 'odd' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border-bottom, var(--zg-row-card-border, 1px solid var(--theme-border-color)))"
            },
            {
              "name": "--zg-row-card-border-bottom_odd",
              "description": "Styles the bottom border of 'odd' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_odd, var(--zg-row-card-border-bottom, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-border-left_odd",
              "description": "Styles the left border of 'odd' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_odd, var(--zg-row-card-border-left, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-border-right_odd",
              "description": "Styles the right border of 'odd' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_odd, var(--zg-row-card-border-right, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-border-top_odd",
              "description": "Styles the top border of 'odd' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_odd, var(--zg-row-card-border-top, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-box-shadow",
              "description": "Applies a box shadow behind cards in 'card' layout-mode",
              "syntax": "none | <shadow>#",
              "default": "none"
            },
            {
              "name": "--zg-row-card-box-shadow_odd",
              "description": "Applies a box shadow behind 'odd' cards in 'card' layout-mode",
              "syntax": "none | <shadow>#",
              "default": "var(--zg-row-card-box-shadow, none)"
            },
            {
              "name": "--zg-row-card-background_even",
              "description": "Styles the background of 'even' cards in 'card' layout-mode",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-row-card-background, var(--zg-row-body-background_even, var(--zg-row-body-background, #fff)))"
            },
            {
              "name": "--zg-row-card-border",
              "description": "Styles the border of cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-row-card-border_even",
              "description": "Styles the border of 'even' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border-bottom, var(--zg-row-card-border, 1px solid var(--theme-border-color)))"
            },
            {
              "name": "--zg-row-card-border-bottom_even",
              "description": "Styles the bottom border of 'even' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_even, var(--zg-row-card-border-bottom, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-border-left_even",
              "description": "Styles the left border of 'even' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_even, var(--zg-row-card-border-left, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-border-right_even",
              "description": "Styles the right border of 'even' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_even, var(--zg-row-card-border-right, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-card-border-top_even",
              "description": "Styles the top border of 'even' cards in 'card' layout-mode",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-card-border_even, var(--zg-row-card-border-top, var(--zg-row-card-border, 1px solid var(--theme-border-color))))"
            },
            {
              "name": "--zg-row-border",
              "description": "Styles the border of row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-row-border-bottom",
              "description": "Styles the bottom border of row",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-row-border, var(--zg-row-border, 0))"
            },
            {
              "name": "--zg-row-color",
              "description": "Sets the font color of all rows",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-row-color_hover",
              "description": "Sets the font color of all rows on hover",
              "syntax": "<color>",
              "default": "var(--zg-row-color)"
            },
            {
              "name": "--zg-row-card-display",
              "description": "Sets the display of cards in 'card' layout-mode",
              "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
              "default": "grid"
            },
            {
              "name": "--zg-row-card-flex-basis",
              "description": "Sets the flex-basis of cards in 'card' layout-mode",
              "syntax": "content | <width>",
              "default": "100%"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGRow",
          "declaration": {
            "name": "ZGRow",
            "module": "zinggrid-lib/src/js/components/zg-row/ZGRow.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-row",
          "declaration": {
            "name": "ZGRow",
            "module": "zinggrid-lib/src/js/components/zg-row/ZGRow.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-search/ZGSearch.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The `<zg-search>` element is used to encapsulate the interface widget necessary for searching the grid --  typically a text field and a button to trigger the search.  The element is added dynamically when search is specified and  should not be directly inserted by the developer.  The element and its contents can be styled using CSS.",
          "tagName": "ZGSearch",
          "cssProperties": [
            {
              "name": "--zg-search-background",
              "description": "Styles the background of search input field",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-search-border",
              "description": "Styles the border of search input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-search-border-bottom",
              "description": "Styles the bottom border of search input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-search-border, 0)"
            },
            {
              "name": "--zg-search-border-left",
              "description": "Styles the left border of search input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-search-border, 0)"
            },
            {
              "name": "--zg-search-border-radius",
              "description": "Applies border radius to search input field",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "0"
            },
            {
              "name": "--zg-search-border-right",
              "description": "Styles the right border of search input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-search-border, 0)"
            },
            {
              "name": "--zg-search-border-top",
              "description": "Styles the top border of search input field",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-search-border, 0)"
            },
            {
              "name": "--zg-search-color",
              "description": "Sets the font color of search input field",
              "syntax": "<color>",
              "default": "var(--theme-color_alt)"
            },
            {
              "name": "--zg-search-font-size",
              "description": "Sets the font size of search input field",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "vd"
            },
            {
              "name": "--zg-search-font-weight",
              "description": "Sets the font weight of search input field",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "var(--theme-font-weight)"
            },
            {
              "name": "--zg-search-height",
              "description": "Sets the height of search input field",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "32px"
            },
            {
              "name": "--zg-search-padding",
              "description": "Sets the padding of search input field",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "0 10px 0 15px"
            },
            {
              "name": "--zg-search-top",
              "description": "Sets the position from the top to place search input field",
              "syntax": "<length> | <percentage> | auto",
              "default": "50%"
            },
            {
              "name": "--zg-search-transform",
              "description": "Sets the transform property of search input",
              "syntax": "none | <transform-list>",
              "default": "translateY(-50%)"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGSearch",
          "declaration": {
            "name": "ZGSearch",
            "module": "zinggrid-lib/src/js/components/zg-search/ZGSearch.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-search",
          "declaration": {
            "name": "ZGSearch",
            "module": "zinggrid-lib/src/js/components/zg-search/ZGSearch.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-select/ZGSelect.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "A custom select dropdown defined by our library. The dropdown can be assigned different options through the `options` attribute.",
          "tagName": "ZGSelect",
          "attributes": [
            {
              "name": "action",
              "description": "The actions of the select dropdown. The current option is pagesize.",
              "type": "string"
            },
            {
              "name": "options",
              "description": "The comma separated string list of options to go into the Select Element",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The default value of the select dropdown",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-select-background",
              "description": "Styles the background of the entire select parent wrapper",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-font-family",
              "description": "Sets the font family of the select option",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-font-size",
              "description": "Sets the font size of the select option",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-font-weight",
              "description": "Sets the font weight of the select option",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-line-height",
              "description": "Sets the line height of the select option",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-outline",
              "description": "Sets the outline of the select option",
              "syntax": "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
              "default": "inherit"
            },
            {
              "name": "--zg-select-transform",
              "description": "Sets the transform of the select option",
              "syntax": "none | <transform-list>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-border",
              "description": "Styles the border of the select",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-select-border-bottom",
              "description": "Styles the bottom border of the select",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-select-border-left",
              "description": "Styles the left border of the select",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-select-border-right",
              "description": "Styles the right border of the select",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-select-border-top",
              "description": "Styles the top border of the select",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-select-height",
              "description": "Sets the minimum height of the select",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "28px"
            },
            {
              "name": "--zg-select-text-background",
              "description": "Styles the background of the 'text' portion of the zg-select element",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "#fff"
            },
            {
              "name": "--zg-select-color",
              "description": "Sets the font color of the select",
              "syntax": "<color>",
              "default": "var(--zing-grid-color, var(--theme-color))"
            },
            {
              "name": "--zg-select-min-width",
              "description": "Sets the minimum width of select",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-select-color_active",
              "description": "Sets the font color of the select option",
              "syntax": "",
              "default": ""
            },
            {
              "name": "--zg-select-trigger-background",
              "description": "Styles the background of the select arrow button (trigger)",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-select-arrow-background)"
            },
            {
              "name": "--zg-select-arrow-border",
              "description": "Styles the border of the select arrow button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-select-arrow-border-bottom",
              "description": "Styles the bottom border of the select arrow button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-arrow-border, 0)"
            },
            {
              "name": "--zg-select-arrow-border-left",
              "description": "Styles the left border of the select arrow button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-arrow-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-select-arrow-border-right",
              "description": "Styles the right border of the select arrow button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-arrow-border, 0)"
            },
            {
              "name": "--zg-select-arrow-border-top",
              "description": "Styles the top border of the select arrow button",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-select-arrow-border, 0)"
            },
            {
              "name": "--zg-select-arrow-color",
              "description": "Sets the color select arrow icon",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "#000"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGSelect",
          "declaration": {
            "name": "ZGSelect",
            "module": "zinggrid-lib/src/js/components/zg-select/ZGSelect.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-select",
          "declaration": {
            "name": "ZGSelect",
            "module": "zinggrid-lib/src/js/components/zg-select/ZGSelect.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-selector-mask/ZGSelectorMask.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-selector-mask>` is used to wrap the cells during user selection for  styling purposes.  The element is dynamically added to the grid based upon the presence of the  `selector` attribute on the `<zing-grid>` element.  The element should not be manually inserted,  though it can be styled using CSS.",
          "tagName": "ZGSelectorMask",
          "cssProperties": [
            {
              "name": "--zg-selector-mask-opacity",
              "description": "Sets the opacity of selector mask",
              "syntax": "<alpha-value>",
              "default": ".1"
            },
            {
              "name": "--zg-selector-mask-background",
              "description": "Styles the background of selector mask",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-secondary)"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGSelectorMask",
          "declaration": {
            "name": "ZGSelectorMask",
            "module": "zinggrid-lib/src/js/components/zg-selector-mask/ZGSelectorMask.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-selector-mask",
          "declaration": {
            "name": "ZGSelectorMask",
            "module": "zinggrid-lib/src/js/components/zg-selector-mask/ZGSelectorMask.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-separator/ZGSeparator.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-separator>` specifies the horizontal bar in the `<zg-menu>` used for separating  items.  The element is created dynamically and should not be manually inserted by developers.  However, `<zg-separator>` can be styled using CSS.",
          "tagName": "ZGSeparator",
          "cssProperties": [
            {
              "name": "--zg-separator-border",
              "description": "Styles the border of separator in the menu",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-separator-border-bottom",
              "description": "Styles the bottom border of separator in the menu",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-separator-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-separator-border-left",
              "description": "Styles the left border of separator in the menu",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-separator-border, 0)"
            },
            {
              "name": "--zg-separator-border-right",
              "description": "Styles the right border of separator in the menu",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-separator-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-separator-border-top",
              "description": "Styles the top border of separator in the menu",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-separator-border, 0)"
            },
            {
              "name": "--zg-separator-margin",
              "description": "Sets the margin of separator in the menu",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "5px 0"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGSeparator",
          "declaration": {
            "name": "ZGSeparator",
            "module": "zinggrid-lib/src/js/components/zg-separator/ZGSeparator.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-separator",
          "declaration": {
            "name": "ZGSeparator",
            "module": "zinggrid-lib/src/js/components/zg-separator/ZGSeparator.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-source/ZGSource.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-source>` is used to source the data in ZingGrid.  The  element internally wraps any text in a `<cite role=\"any\">` tag for proper semantics.  The element is stylable with CSS like most ZingGrid elements.",
          "tagName": "ZGSource",
          "attributes": [
            {
              "name": "position",
              "description": "Indicates where to position the source",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-source-background",
              "description": "Styles the background of source when in `<zg-header>`",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--theme-color-light)"
            },
            {
              "name": "--zg-source-border",
              "description": "Styles the border of source when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-source-border-bottom",
              "description": "Styles the bottom border of source when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border, 0)"
            },
            {
              "name": "--zg-source-border-left",
              "description": "Styles the left border of source when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border, 0)"
            },
            {
              "name": "--zg-source-border-right",
              "description": "Styles the right border of source when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border, 0)"
            },
            {
              "name": "--zg-source-border-top",
              "description": "Styles the top border of source when in `<zg-header>`",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border, 1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-source-border-radius",
              "description": "Styles the border radius of source",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "0"
            },
            {
              "name": "--zg-source-color",
              "description": "Sets the font color content inside of source when in `<zg-header>`",
              "syntax": "<color>",
              "default": "var(--theme-font-size)"
            },
            {
              "name": "--zg-source-font-size",
              "description": "Sets the font size of source",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-source-font-style",
              "description": "Sets the font style of source",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "inherit"
            },
            {
              "name": "--zg-source-font-weight",
              "description": "Sets the font weight of source",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "inherit"
            },
            {
              "name": "--zg-source-line-height",
              "description": "Setes the line height of source",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-source-min-height",
              "description": "Sets the min-height of source",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "auto"
            },
            {
              "name": "--zg-source-padding",
              "description": "Sets the padding of source",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "5px var(--theme-padding_x)"
            },
            {
              "name": "--zg-source-text-align",
              "description": "Sets text alignment of content inside of source",
              "syntax": "start | end | left | right | center | justify | match-parent",
              "default": "left"
            },
            {
              "name": "--zg-source-background_top",
              "description": "Styles the background of source in grid header",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-source-background, var(--theme-color-light))"
            },
            {
              "name": "--zg-source-border_top",
              "description": "Styles the border of source in grid header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zg-source-border-bottom_top",
              "description": "Styles the bottom border of source in grid header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-bottom, var(--zg-source-border, 1px solid var(--theme-border-color)))"
            },
            {
              "name": "--zg-source-border-left_top",
              "description": "Styles the left border of source in grid header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-left, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-border-right_top",
              "description": "Styles the right border of source in grid header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-right, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-border-top_top",
              "description": "Styles the top border of source in grid header",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-top, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-border-radius_top",
              "description": "Sets the border radius of source in grid header",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "var(--zg-source-border-radius, 0)"
            },
            {
              "name": "--zg-source-color_top",
              "description": "Sets the font color of source in grid header",
              "syntax": "<color>",
              "default": "var(--zg-source-color, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-font-size_top",
              "description": "Sets the font size of source in grid header",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "var(--zg-source-font-size, .8rem)"
            },
            {
              "name": "--zg-source-font-style_top",
              "description": "Sets the font style of source in grid header",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "var(--zg-source-font-style, inherit)"
            },
            {
              "name": "--zg-source-font-weight_top",
              "description": "Sets the font weight of source in grid header",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "var(--zg-source-font-weight, inherit)"
            },
            {
              "name": "--zg-source-line-height_top",
              "description": "Sets the line height of source in grid header",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "var(--zg-source-line-height, inherit)"
            },
            {
              "name": "--zg-source-min-height_top",
              "description": "Sets the min-height of source in grid header",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-source-min-height, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-padding_top",
              "description": "Sets the padding of source in grid header",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--zg-source-padding, 5px var(--theme-padding_x))"
            },
            {
              "name": "--zg-source-text-align_top",
              "description": "Sets the text alignment of source in grid header",
              "syntax": "start | end | left | right | center | justify | match-parent",
              "default": "var(--zg-source-text-align, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-background_bottom",
              "description": "Styles the background of source in grid footer",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "var(--zg-source-background, var(--theme-color-light))"
            },
            {
              "name": "--zg-source-border_bottom",
              "description": "Styles the border of source in grid footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border, 0)"
            },
            {
              "name": "--zg-source-border-bottom_bottom",
              "description": "Styles the bottom border of source in grid footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-bottom, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-border-left_bottom",
              "description": "Styles the left border of source when in grid footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-left, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-border-right_bottom",
              "description": "Styles the right border of source in grid footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-right, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-border-top_bottom",
              "description": "Sets the border radius of source in grid footer",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-source-border-top, var(--zg-source-border, 1px solid var(--theme-border-color)))"
            },
            {
              "name": "--zg-source-border-radius_bottom",
              "description": "Styles the top border of source in grid footer",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "var(--zg-source-border-radius, 0 0 var(--zing-grid-border-radius, 0) var(--zing-grid-border-radius, 0))"
            },
            {
              "name": "--zg-source-color_bottom",
              "description": "Sets the font color of source in grid footer",
              "syntax": "<color>",
              "default": "var(--zg-source-color, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-font-size_bottom",
              "description": "Sets the font size of source in grid footer",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "var(--zg-source-font-size, .8rem)"
            },
            {
              "name": "--zg-source-font-style_bottom",
              "description": "Sets the font style of source in grid footer",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "var(--zg-source-font-style, inherit)"
            },
            {
              "name": "--zg-source-font-weight_bottom",
              "description": "Sets the font weight of source in grid footer",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "var(--zg-source-font-weight, inherit)"
            },
            {
              "name": "--zg-source-line-height_bottom",
              "description": "Sets the line height of source in grid footer",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "var(--zg-source-line-height, inherit)"
            },
            {
              "name": "--zg-source-min-height_bottom",
              "description": "Sets the min-height of source in grid footer",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "var(--zg-source-min-height, var(--zg-source-border, 0))"
            },
            {
              "name": "--zg-source-padding_bottom",
              "description": "Sets the padding of source when in grid footer",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "var(--zg-source-padding, 5px var(--theme-padding_x))"
            },
            {
              "name": "--zg-source-text-align_bottom",
              "description": "Sets the text alignment of source in grid footer",
              "syntax": "start | end | left | right | center | justify | match-parent",
              "default": "var(--zg-source-text-align, var(--zg-source-border, 0))"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Source content."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGSource",
          "declaration": {
            "name": "ZGSource",
            "module": "zinggrid-lib/src/js/components/zg-source/ZGSource.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-source",
          "declaration": {
            "name": "ZGSource",
            "module": "zinggrid-lib/src/js/components/zg-source/ZGSource.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-status/ZGStatus.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-status>` is a custom element used to display messages to the  user, such as errors and verifications of CRUD actions.  `<zg-status>` is created  dynamically and should not be inserted manually.  The `<zg-status>` element is  stylable with CSS.",
          "tagName": "ZGStatus",
          "cssProperties": [
            {
              "name": "--zg-status-background",
              "description": "Styles the background of status",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "#333"
            },
            {
              "name": "--zg-status-border",
              "description": "Styles the border of status",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zg-status-border-bottom",
              "description": "Styles the bottom border of status",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-status-border, 0)"
            },
            {
              "name": "--zg-status-border-left",
              "description": "Styles the left border of status",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-status-border, 0)"
            },
            {
              "name": "--zg-status-border-right",
              "description": "Styles the right border of status",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-status-border, 0)"
            },
            {
              "name": "--zg-status-border-top",
              "description": "Styles the top border of status",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zg-status-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zg-status-box-shadow",
              "description": "Applies a box shadow behind status",
              "syntax": "none | <shadow>#",
              "default": "none"
            },
            {
              "name": "--zg-status-color",
              "description": "Sets the font color of contents in status",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "name": "--zg-status-margin",
              "description": "Sets the margin of status",
              "syntax": "[ <length> | <percentage> | auto ]{1,4}",
              "default": "0"
            },
            {
              "name": "--zg-status-min-height",
              "description": "Sets the min-height of status",
              "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
              "default": "27px"
            },
            {
              "name": "--zg-status-error-background",
              "description": "Styles the background of 'error' status",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "red"
            },
            {
              "name": "--zg-status-error-color",
              "description": "Sets the font color of contents of 'error' status",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "name": "--zg-status-success-background",
              "description": "Styles the background of 'success' status",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "green"
            },
            {
              "name": "--zg-status-success-color",
              "description": "Sets the font color of contents of 'success' status",
              "syntax": "<color>",
              "default": "#fff"
            },
            {
              "name": "--zg-status-align-items",
              "description": "Sets the alignment of inner elements of status",
              "syntax": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
              "default": "center"
            },
            {
              "name": "--zg-status-justify-content",
              "description": "Sets the horizontal alignment of contents in status",
              "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
              "default": "flex-start"
            },
            {
              "name": "--zg-status-font-family",
              "description": "Sets the font family of contents in status",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "var(--theme-font-family)"
            },
            {
              "name": "--zg-status-font-size",
              "description": "Sets the font size of contents in status",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "inherit"
            },
            {
              "name": "--zg-status-line-height",
              "description": "Sets the line height of status",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": "1"
            },
            {
              "name": "--zg-status-max-width",
              "description": "Sets the max-width of the status-message area",
              "syntax": "",
              "default": "300px"
            },
            {
              "name": "--zg-status-padding",
              "description": "Sets the padding of status",
              "syntax": "[ <length> | <percentage> ]{1,4}",
              "default": "14px var(--theme-padding_x)"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGStatus",
          "declaration": {
            "name": "ZGStatus",
            "module": "zinggrid-lib/src/js/components/zg-status/ZGStatus.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-status",
          "declaration": {
            "name": "ZGStatus",
            "module": "zinggrid-lib/src/js/components/zg-status/ZGStatus.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-text/ZGText.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-text>` is a ZingGrid specific text value that is bound to  the status of the grid, as defined by the `value` attribute.  The field can be  manually inserted by a developer, but is more commonly added by the use of certain  grid features, like paging.  The element is stylable with CSS.",
          "tagName": "ZGText",
          "attributes": [
            {
              "name": "value",
              "description": "Specifies what value to generate in text field.  Current built-in options are pager-related information.",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zg-text-color",
              "description": "Sets the font color of text",
              "syntax": "<color>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-text-font-family",
              "description": "Sets the font family of text",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-text-font-size",
              "description": "Sets the font size of text",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-text-font-style",
              "description": "Sets the font style of text",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-text-font-weight",
              "description": "Sets the font weight of text",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "Browser's default value"
            },
            {
              "name": "--zg-text-line-height",
              "description": "Sets the line height of text",
              "syntax": "normal | <number> | <length> | <percentage>",
              "default": ".8"
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Text value."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGText",
          "declaration": {
            "name": "ZGText",
            "module": "zinggrid-lib/src/js/components/zg-text/ZGText.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-text",
          "declaration": {
            "name": "ZGText",
            "module": "zinggrid-lib/src/js/components/zg-text/ZGText.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zg-tooltip/ZGTooltip.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "`<zg-tooltip>` elements are inserted dynamically by the ZingGrid library and serves as a container for the grid's tooltips.  As a generated element, developers should not manually place `<zg-tooltip>` in their grid; however, they may style the tooltips and its internal elements using CSS.",
          "tagName": "ZGTooltip"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZGTooltip",
          "declaration": {
            "name": "ZGTooltip",
            "module": "zinggrid-lib/src/js/components/zg-tooltip/ZGTooltip.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zg-tooltip",
          "declaration": {
            "name": "ZGTooltip",
            "module": "zinggrid-lib/src/js/components/zg-tooltip/ZGTooltip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/components/zing-grid/ZingGrid.js",
      "declarations": [
        {
          "kind": "class",
          "customElement": true,
          "description": "The most important tag in the library. Contains most of the attributes to turn grid features on/off.  Set `zing-grid:not(:defined) {display:none;}` to hide <zing-grid> instances until they are ready.  This stops child elements from appearing unstyled for a brief moment.",
          "tagName": "ZingGrid",
          "attributes": [
            {
              "name": "align",
              "description": "Aligns the contents of all column cells (center|left|right)",
              "type": "string"
            },
            {
              "name": "button-tooltip-disabled",
              "description": "Turns off the tooltips on all buttons in the grid",
              "type": "boolean"
            },
            {
              "name": "caption",
              "description": "The caption for the grid",
              "type": "string"
            },
            {
              "name": "card",
              "description": "Specifies the defined `<zg-card>` of the grid.  More appropriate to use `<zg-card>` in most cases or set the property programmatically.",
              "type": "any"
            },
            {
              "name": "cell-break",
              "description": "The type of `word-break` style for body cells. When not set, `cell-break` style is `normal` by default. If the width of a column is set, `cell-break` is `word` by default. To overwrite `cell-break` for cells in a specific column, set `cell-break` for that column.",
              "type": "'all' | 'ellipsis' | 'normal' | 'word'"
            },
            {
              "name": "cell-class",
              "description": "Adds a class to each `<zg-cell>` in the grid. This attribute can be applied to both `<zing-grid>` or `<zg-column>`. If the attribute is applied to both, `<zg-column>`'s `cell-class` overwrites `<zing-grid>`'s `cell-class`. To set a class conditionally, set `cell-class` to the name of the function, which takes in the arguments: `cellData`, `domContainer`, `cellObject`.",
              "type": "string"
            },
            {
              "name": "cell-editor",
              "description": "Turns cell editing on or off. Automatically turned on when setting `editor` or `editor-controls`.",
              "type": "'disabled' | boolean"
            },
            {
              "name": "cell-focus",
              "description": "Turns off keyboard nav cell focus if set to disabled",
              "type": "'disabled'"
            },
            {
              "name": "cell-tooltip-action",
              "description": "Sets the execution method of custom 'icon' type tooltips to either activate on hover or click of the icon",
              "type": "'click' | 'hover'"
            },
            {
              "name": "cell-tooltip-delay",
              "description": "Sets the hover delay in milliseconds before displaying the tooltip. If delay is not specified, it is 1000ms on cell tooltips without an icon and 0ms on cell tooltips with an icon.",
              "type": "number"
            },
            {
              "name": "cell-tooltip-icon",
              "description": "Specifies the icon to use for the info column types",
              "type": "string"
            },
            {
              "name": "cell-tooltip-position",
              "description": "Sets the tooltip-position for the cell",
              "type": "'top' | 'left' | 'right' | 'bottom'"
            },
            {
              "name": "cell-tooltip-renderer",
              "description": "Gets the name of the user's custom render function, on window, to use the function's return value as the tooltip content",
              "type": "string"
            },
            {
              "name": "cell-tooltip-template",
              "description": "Points to an external template element to be used as the template for the tooltip display",
              "type": "string"
            },
            {
              "name": "cell-tooltip-type",
              "description": "Sets the style to use for the tooltips.  Uses the `default` style by default.  Can set to `system` to match the tooltips used on icons throughout `<zing-grid>`.",
              "type": "'default' | 'system'"
            },
            {
              "name": "col-class",
              "description": "Adds a class to each `<zg-cell>` in targeted `<zg-column>`. To apply a class conditionally, set the value to the name of the function to run on each cell value. The function takes the parameters `fieldIndex`, `domContainer`, and `colObject`, and returns a string which is the class name to apply.",
              "type": "string"
            },
            {
              "name": "column-drag",
              "description": "Enables column dragging",
              "type": "boolean"
            },
            {
              "name": "column-drag-action",
              "description": "Specifies the action of dragging allowed.  By default, if `column-drag` is enabled then `column-drag-action` is set `\"both\"`.  This property will turn on column-drag if not already set.",
              "type": "'reorder' | 'hide' | 'both'"
            },
            {
              "name": "column-resizable",
              "description": "Presence of attribute turns on column resizing for all columns. This excludes internal column types (), which requires setting ZGColumn[resizable] on the column.",
              "type": "boolean"
            },
            {
              "name": "column-resizable-max-width",
              "description": "Sets the maximum width columns can be set to when resizing",
              "type": "number"
            },
            {
              "name": "column-resizable-min-width",
              "description": "Sets the minimum width columns can be set to when resizing",
              "type": "number"
            },
            {
              "name": "column-resizable-persistent",
              "description": "Presence of attribute displays column resizing for all columns without hover",
              "type": "boolean"
            },
            {
              "name": "column-width",
              "description": "Sets the width each of the columns",
              "type": "'fit' | 'fitheader' | 'fitcontent' | 'stretch' | '10%' | '150px' | '150' | string | number"
            },
            {
              "name": "columns",
              "description": "Specifies the columns of the grid.  More appropriate to use `<zg-column>` in most cases or set the property programmatically.",
              "type": "any"
            },
            {
              "name": "columns-control",
              "description": "Presence of attribute turns on the menu to show and hide columns",
              "type": "boolean"
            },
            {
              "name": "compact",
              "description": "Augments internal themes to a compact mode",
              "type": "boolean"
            },
            {
              "name": "config",
              "description": "Used to set multiple grid properties at once.  This should never be used directly. This is meant for object instantiation.",
              "type": "any"
            },
            {
              "name": "confirm-delete",
              "description": "Turns off delete confirmation if set to disable",
              "type": "'disabled'"
            },
            {
              "name": "context-menu",
              "description": "Enables the default `<zing-grid>` context menu or set to the id name of a custom `<zg-menu>`.  If set to a custom menu and `<zg-menu>` has the `replace` attribute present, then the custom menu will replace the context menu. Otherwise the contents of the custom menu is appended to the end of context menu.",
              "type": "string | boolean"
            },
            {
              "name": "creator",
              "description": "Sets the create editor to modal (default) or inline.",
              "type": "'inline' | boolean"
            },
            {
              "name": "data",
              "description": "Data for the grid presented as an array or object",
              "type": "any"
            },
            {
              "name": "default-display",
              "description": "The data to display in each cell where the data value is null or undefined",
              "type": "string"
            },
            {
              "name": "dialog",
              "description": "Sets `<zg-dialog>` to display dialog and mask within the grid dimensions instead of the whole screen",
              "type": "boolean"
            },
            {
              "name": "dir",
              "description": "The HTML standard direction to indicate direction of grid's columns and text",
              "type": "string"
            },
            {
              "name": "editor",
              "description": "Turns on the grid editor.  Enables single cell editing via double click. Sets the editor to inline (default) or modal.",
              "type": "'modal' | boolean"
            },
            {
              "name": "editor-controls",
              "description": "Adds columns for the editor controls.  If it is added, default is \"all\".",
              "type": "'editor' | 'remover' | 'creator' | 'all' | boolean"
            },
            {
              "name": "filter",
              "description": "Enables filtering for all columns.  Can be turned on/off individually via column.",
              "type": "boolean"
            },
            {
              "name": "foot-class",
              "description": "Adds a class to each `<zg-cell>` in the `<zg-foot>`. To apply a class conditionally, set the value to the name of the function to run  on each cell value. The function takes the parameters `fieldIndex`, `domContainer`, and `colObject`, and returns a string which is the class name to apply.",
              "type": "string"
            },
            {
              "name": "frozen-columns-left",
              "description": "Sets the number of columns to freeze to the left",
              "type": "number"
            },
            {
              "name": "frozen-columns-right",
              "description": "Sets the number of columns to freeze to the right",
              "type": "number"
            },
            {
              "name": "frozen-row-class",
              "description": "Adds a class to each `<zg-row>` element. To apply a class conditionally, set the value to the name of the function to run on each cell value. The function takes the parameters `data`, `rowIndex` (1-based),  `domRow`, and `rowObject`, `rowParent`, and returns a string which is the class name to apply.",
              "type": "string"
            },
            {
              "name": "frozen-rows-bottom",
              "description": "Sets the number of rows to freeze to the bottom",
              "type": "number"
            },
            {
              "name": "frozen-rows-top",
              "description": "Sets the number of rows to freeze to the top",
              "type": "number"
            },
            {
              "name": "gridlines",
              "description": "Sets vertical, horizontal or both grid lines to the grid",
              "type": "'both' | 'horz' | 'horizontal' | 'vert' | 'vertical'"
            },
            {
              "name": "group-by",
              "description": "Sets the index fields to group on.",
              "type": "string"
            },
            {
              "name": "head-class",
              "description": "Adds a class to each `<zg-cell>` in the `<zg-head>`. To apply a class conditionally, set the value to the name of the function to run  on each cell value. The function takes the parameters `fieldIndex`, `domContainer`, and `colObject`, and returns a string which is the class name to apply.",
              "type": "string"
            },
            {
              "name": "header-auto-format",
              "description": "Converts camel, dash, and kebab case to properly spaced and capitalized typography. Setting to `disabled` will turn off formatting on headers.  Set to a function name to customize formatting of headers.",
              "type": "string"
            },
            {
              "name": "header-row-hide",
              "description": "Hides any header rows",
              "type": "string"
            },
            {
              "name": "header-tooltip-action",
              "description": "Sets the execution method of custom 'icon' type tooltips to either activate on hover or click of the icon",
              "type": "'click' | 'hover'"
            },
            {
              "name": "header-tooltip-delay",
              "description": "Sets the hover delay in milliseconds before displaying the header tooltip",
              "type": "number"
            },
            {
              "name": "header-tooltip-icon",
              "description": "Specifies the icon to use for the header tooltip trigger icon",
              "type": "string"
            },
            {
              "name": "header-tooltip-icon-position",
              "description": "Sets the tooltip icon position for the tooltip icon in the header cells",
              "type": "'left' | 'right' | 'after-text'"
            },
            {
              "name": "header-tooltip-position",
              "description": "Sets the tooltip-position for the header cell",
              "type": "'top' | 'left' | 'right' | 'bottom'"
            },
            {
              "name": "header-tooltip-renderer",
              "description": "Gets the name of the user's custom render function, on window, to use the function's return value as the tooltip content",
              "type": "string"
            },
            {
              "name": "header-tooltip-template",
              "description": "Points to an external template element to be used as the template for the tooltip display",
              "type": "string"
            },
            {
              "name": "header-tooltip-trigger",
              "description": "Sets what part of the header triggers the tooltip.  If set to 'icon', an info icon is added to the header.",
              "type": "'text' | 'icon'"
            },
            {
              "name": "header-tooltip-type",
              "description": "Sets the style to use for the tooltips.  Uses the `default` style by default.  Can set to `system` to match the tooltips used on icons throughout `<zing-grid>`.",
              "type": "'default' | 'system'"
            },
            {
              "name": "height",
              "description": "Sets the height of the grid.  If the height is less than the size of the content, scrolling is added to grid body.",
              "type": "string | number"
            },
            {
              "name": "icon-set",
              "description": "Allows the user to change the grid icon set to an allowed 3rd-party type (e.g., Font-Awesome). To use a custom icon set, the icon set must first be registered.",
              "type": "string"
            },
            {
              "name": "icon-set-data",
              "description": "If setting [icon-set=\"custom\"], points to the custom JSON key/value mapping",
              "type": "string"
            },
            {
              "name": "lang",
              "description": "Sets the language to use for the grid",
              "type": "string"
            },
            {
              "name": "layout",
              "description": "Sets the grid layout to be either `card` or `row` and adds `<zg-layout-controls>` to the grid. The default is based on the size of the user's screen, unless `layout` is set.",
              "type": "'card' | 'row'"
            },
            {
              "name": "layout-controls",
              "description": "When `layout` is set, by default `layout-controls` is enabled. To hide, set `layout-controls` to `disabled`.  Presence of this attribute will enable `<zg-layout-controls>` even if `layout` is not set.",
              "type": "'disabled' | boolean"
            },
            {
              "name": "loading",
              "description": "Presence of attribute adds loading state to grid, which triggers `<zg-load-mask>` to show. This attribute allows styling the height of the grid (via CSS) before the data has loaded in the grid.",
              "type": "boolean"
            },
            {
              "name": "loading-text",
              "description": "Sets the text to display in the `<zg-load-mask>` on data load",
              "type": "string"
            },
            {
              "name": "loadmask",
              "description": "Set `loadmask=\"disabled\"` to prevent the `<zg-load-mask>` from showing on data load.",
              "type": "'disabled'"
            },
            {
              "name": "nested-data-separator",
              "description": "Indicates separator that should be used for nested headers and data paths.  By default, the '.' is used: 'fullName.first' Setting to `disabled` will turn off parsing for nested headers and will not look at pathing for data",
              "type": "string"
            },
            {
              "name": "no-data",
              "description": "Sets the message that appears in the `<zg-no-data>` element when there are no records",
              "type": "string"
            },
            {
              "name": "page-size",
              "description": "Sets the number of records or rows to display per page. Can be set only if `pager` is set.",
              "type": "number"
            },
            {
              "name": "page-size-card",
              "description": "Sets the number of cards to display per page when in card mode. Can be set only if `pager` is set.",
              "type": "number"
            },
            {
              "name": "page-size-options",
              "description": "Sets the options for page size in `zg-option-list`. Can be set only if `pager` is set.",
              "type": "string"
            },
            {
              "name": "page-size-row",
              "description": "Sets the number of rows to display per page when in row mode. Can be set only if `pager` is set.",
              "type": "number"
            },
            {
              "name": "pager",
              "description": "Adds pagination functionality and controls to the grid",
              "type": "boolean"
            },
            {
              "name": "pager-button-limit",
              "description": "Determines max number of page buttons to display.  Default is 5.",
              "type": "number"
            },
            {
              "name": "pager-position",
              "description": "Sets pager position. Note: `pager` attribute or `<zg-pager>` must be present in order to position pager.",
              "type": "'top' | 'bottom'"
            },
            {
              "name": "pager-type",
              "description": "Determines which type of pagination to use, input or buttons",
              "type": "'button-text' | 'button-arrows'"
            },
            {
              "name": "params",
              "description": "Name/Value pairs of `<zg-param>` values.  More appropriate to use `<zg-param>` in most cases.",
              "type": "any"
            },
            {
              "name": "preserve-state-id",
              "description": "The ID to use as the key in storing the state.  Each grid should have a unique ID or else the state data  will be shared across grids.",
              "type": "string"
            },
            {
              "name": "preserve-state-load",
              "description": "The method to call when state is ready to be retrieved.  Must also set preserveStateSave and preserveStateId",
              "type": "string"
            },
            {
              "name": "preserve-state-options",
              "description": "Comma separated list of features to save in state preservation.   Options are 'columnfrozen', 'columnposition', 'columnvisibility', 'columnwidth', 'filter', 'layout', 'page', 'pagesize', 'rowfrozen', 'rowselector', 'search', 'selector', 'sort' NOTE:  If columnfrozen is set, then columnposition will implicitly be set as well",
              "type": "string"
            },
            {
              "name": "preserve-state-save",
              "description": "The method to call when state is ready to be saved.  Must also set preserveStateLoad and preserveStateId.",
              "type": "string"
            },
            {
              "name": "record-count",
              "description": "Sets the total record count.  Useful for `loadByPage` when the response packet does not return total count of records.",
              "type": "number"
            },
            {
              "name": "record-duplicate",
              "description": "Adds the duplicate control to the end of the row before the edit controls",
              "type": "boolean"
            },
            {
              "name": "record-key",
              "description": "Adds the record key column to the grid.  If set to a string, the string is the header text.",
              "type": "string | boolean"
            },
            {
              "name": "row-class",
              "description": "Adds a class to each `<zg-row>` element. To apply a class conditionally, set the value to the name of the function to run on each cell value. The function takes the parameters `data`, `rowIndex` (1-based),  `domRow`, and `rowObject`, `rowParent`, `bodyRowIndex` (1 based), and returns a string which is the class name to apply.",
              "type": "string"
            },
            {
              "name": "row-height",
              "description": "Sets the height of each body row.  By default, the body row height is set to 'auto' where it will auto fit the content. In the case of frozen columns, the default body row height is '48px' because there is a performance hit when using 'auto' with frozen columns.",
              "type": "string | number"
            },
            {
              "name": "row-selector",
              "description": "Adds `selector` type column to the rows as the first column",
              "type": "boolean"
            },
            {
              "name": "search",
              "description": "Turns on the search feature and adds `<zg-search>` to the grid. The search button appears in the caption header.",
              "type": "boolean"
            },
            {
              "name": "selector",
              "description": "Turns on the selector feature on the grid and adds `<zg-selector-mask>` to the grid",
              "type": "boolean"
            },
            {
              "name": "server-rendered",
              "description": "Indicates that the grid was completely rendered on the server and embedded in the page",
              "type": "boolean"
            },
            {
              "name": "sort",
              "description": "Enables sorting on all columns.  It is possible to disable specific columns via the column's object or setting `sort=\"disabled\"` to specified columns.",
              "type": "boolean"
            },
            {
              "name": "sort-intl",
              "description": "Overrides default behavior for international sorting.  Turn off international sorting with `sort-intl=\"disabled\"`.",
              "type": "'disabled'"
            },
            {
              "name": "sorter",
              "description": "Override the column sorting by passing in method name of sort function instead.  Sorter function takes in two values (a, b) and returns 1, -1, or 0 indicating if `a > b`, `a < b`, or `a = b`.",
              "type": "string"
            },
            {
              "name": "source",
              "description": "Defines the source of the data in the grid. Adds the `<zg-source>` element.",
              "type": "string"
            },
            {
              "name": "src",
              "description": "Specifies the absolute or relative URL to fetch data from to populate the grid",
              "type": "string"
            },
            {
              "name": "static-menu",
              "description": "Adds a display button that launches the contextmenu.  If set to a custom menu and `<zg-menu>` has the `replace` attribute present, then the custom menu will replace the context menu. Otherwise the contents of the custom menu is appended to the end of context menu.",
              "type": "boolean"
            },
            {
              "name": "status-delay",
              "description": "Changes the duration a status message will remain visible until it automatically closes (in milliseconds)",
              "type": "number"
            },
            {
              "name": "status-persist",
              "description": "Prevents status messages from automatically closing after a delay",
              "type": "boolean"
            },
            {
              "name": "status-position",
              "description": "Positions the status message in one of nine positions relative to the grid",
              "type": "'top left' | 'center left' | 'bottom left' | 'top center' | 'center' | 'bottom center' | 'top right' | 'center right' | 'bottom right' | 'bar'"
            },
            {
              "name": "template-end-delimiter",
              "description": "Defines the regex expression for closing data binding",
              "type": "string"
            },
            {
              "name": "template-start-delimiter",
              "description": "Defines the regex expression for starting data binding",
              "type": "string"
            },
            {
              "name": "theme",
              "description": "Sets the theme of the grid.  Built-in themes are specified by keyword, but custom theme names are also accepted by setting a URL path to your custom css theme file.  For custom themes, on load set `theme` to the path to the custom theme file.  After, set to theme name to switch themes.",
              "type": "'android' | 'black' | 'default' | 'dark' | 'ios' | 'urlToThemeFile' | 'customThemeName' | string"
            },
            {
              "name": "validation-error-message",
              "description": "Sets the default validation error message",
              "type": "string"
            },
            {
              "name": "validation-required-message",
              "description": "Sets the default validation required message",
              "type": "string"
            },
            {
              "name": "viewport",
              "description": "Internal attribute.  Should not be set.",
              "type": "string"
            },
            {
              "name": "viewport-pause",
              "description": "Keeps current value of `viewport` and freezes the breakpoint",
              "type": "boolean"
            },
            {
              "name": "viewport-stop",
              "description": "Removes `viewport` attribute, disabling viewport resizing",
              "type": "boolean"
            },
            {
              "name": "viewport-types",
              "description": "Sets custom `viewport` breakpoints (value string-object must be valid JSON). NOTE: If you don't set `mobile`, the grid won't auto-set card or row mode.",
              "type": "string"
            },
            {
              "name": "width",
              "description": "Sets the width of the grid.  If the width is less than the size of the content, scroll is added to `<zg-body>`.",
              "type": "string | number"
            },
            {
              "name": "zebra",
              "description": "Presence of attribute adds the classes, `zebra-1` and `zebra-2`, alternating on `<zg-row>` elements.  Setting to a list of class names will assign classes in sequential order.  For conditional zebra classes, `zebra` also accepts name of function that returns a class name to use for zebra striping.",
              "type": "string"
            }
          ],
          "cssProperties": [
            {
              "name": "--zing-grid-body-border-top",
              "description": "Styles the top border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-body-border, 0)"
            },
            {
              "name": "--zing-grid-body-border-right",
              "description": "Styles the right border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-body-border, 0)"
            },
            {
              "name": "--zing-grid-body-border-left",
              "description": "Styles the left border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-body-border, 0)"
            },
            {
              "name": "--zing-grid-body-border-bottom",
              "description": "Styles the bottom border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-body-border, 0)"
            },
            {
              "name": "--zing-grid-body-border",
              "description": "Styles the border of grid body",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zing-grid-table-border-top",
              "description": "Styles the top border of grid table contents",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-table-border, 0)"
            },
            {
              "name": "--zing-grid-table-border-right",
              "description": "Styles the right border of grid table contents",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-table-border, 0)"
            },
            {
              "name": "--zing-grid-table-border-left",
              "description": "Styles the left border of grid table contents",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-table-border, 0)"
            },
            {
              "name": "--zing-grid-table-border-bottom",
              "description": "Styles the bottom border of grid table contents",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-table-border, 0)"
            },
            {
              "name": "--zing-grid-table-border",
              "description": "Styles the border of grid table contents",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "0"
            },
            {
              "name": "--zing-grid-font-weight",
              "description": "Sets the font weight of grid text",
              "syntax": "<font-weight-absolute> | bolder | lighter",
              "default": "--theme-font-weight"
            },
            {
              "name": "--zing-grid-font-style",
              "description": "Sets the font style of grid text",
              "syntax": "normal | italic | oblique <angle>?",
              "default": "--theme-font-style"
            },
            {
              "name": "--zing-grid-font-size",
              "description": "Sets the font size of grid text",
              "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
              "default": "--theme-font-size"
            },
            {
              "name": "--zing-grid-font-family",
              "description": "Sets the font family of grid text",
              "syntax": "[ <'family-name'> | <generic-family> ]#",
              "default": "--theme-font-family"
            },
            {
              "name": "--zing-grid-color",
              "description": "The font color of grid",
              "syntax": "<color>",
              "default": "--theme-color"
            },
            {
              "name": "--zing-grid-box-shadow",
              "description": "Applies a box shadow behind grid",
              "syntax": "none | <shadow>#",
              "default": "none"
            },
            {
              "name": "--zing-grid-border-top",
              "description": "Styles the top border of grid",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zing-grid-border-right",
              "description": "Styles the right border of grid",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zing-grid-border-radius",
              "description": "Applies border radious to grid",
              "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
              "default": "0"
            },
            {
              "name": "--zing-grid-border-left",
              "description": "Styles the left border of grid",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zing-grid-border-bottom",
              "description": "Styles the bottom border of grid",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "var(--zing-grid-border, 1px solid var(--theme-border-color))"
            },
            {
              "name": "--zing-grid-border",
              "description": "Styles the border of grid",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid var(--theme-border-color)"
            },
            {
              "name": "--zing-grid-background",
              "description": "Styles the background of grid",
              "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
              "default": "#fff"
            },
            {
              "name": "--zing-grid-freeze-style-box-shadow",
              "description": "Styles the box-shadow of the frozen column styling element",
              "syntax": "none | <shadow>#",
              "default": "inset 0 0 6px #99caff"
            },
            {
              "name": "--zing-grid-freeze-style-border",
              "description": "Styles the border of the frozen column styling element",
              "syntax": "<line-width> || <line-style> || <color>",
              "default": "1px solid #d6e9ff"
            }
          ],
          "events": [
            {
              "name": "card:click",
              "description": "Fires the `card:click` and `record:click` event when a click occurs on a record (card).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "card:mouseout",
              "description": "Fires the event when mouse is moved out a record (card).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "card:mouseover",
              "description": "Fires the event when mouse is moved over a record (card).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:beforerender",
              "description": "Fires the event before a cell is rendered.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:click",
              "description": "Fires the event when a click occurs to a cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:closeedit",
              "description": "Fires the event when the cell editor is closed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:copy",
              "description": "Fires the event when copying (ctrl+c) occurs in a cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:mouseout",
              "description": "Fires the event when mouse is moved out of a cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:mouseover",
              "description": "Fires the event when mouse is moved over a cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:openedit",
              "description": "Fires the event when the cell editor is opened.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:paste",
              "description": "Fires the event when pasting (ctrl+p) occurs in a cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "cell:rightclick",
              "description": "Fires the event when right click occurs on a cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "column:click",
              "description": "Fires event when click on a column.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "column:filter",
              "description": "Fires the event when a column is filtered.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "column:mouseout",
              "description": "Fires event when mouseout on a column.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "column:mouseover",
              "description": "Fires event when mouseover on a column.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:cell:beforechange",
              "description": "Fires the event before a single cell value is changed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:cell:change",
              "description": "Fires the event after a single cell value is changed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:load",
              "description": "Fires the event every time a new dataset is loaded in the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:beforechange",
              "description": "Fires the event before a record (row) is changed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:beforedelete",
              "description": "Fires the event before a record (row) is deleted from the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:beforeinsert",
              "description": "Fires the event before a new record (row) is added to the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:change",
              "description": "Fires the event after a record (row) is changed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:delete",
              "description": "Fires the event when a record (row) is deleted from the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:insert",
              "description": "Fires the event after a new record (row) is added to the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "data:record:openinsert",
              "description": "Fires event when the insert dialog is opened",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:beforerender",
              "description": "Fires the event once before the grid renders.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:columnmove",
              "description": "Fires the event when a column is moved to a frozen spot or within a fram",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:columntogglevisiblity",
              "description": "Fires the event when a column is hidden or shown",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:contextmenuclose",
              "description": "Fires the  event when the contextmenu is closed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:contextmenuopen",
              "description": "Fires the event when the contextmenu is opened.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:deselect",
              "description": "Fires the event when selection is deselected in the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:hydrate",
              "description": "Fires the event when the pre-rendered grid is finished being hydrated.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:keydownesc",
              "description": "Fires the event when the (Esc) key is pressed.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:pagechange",
              "description": "Fires the event when a page changes in the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:pagefirst",
              "description": "Fires the event when the grid changes to the first page.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:pagelast",
              "description": "Fires the event when the grid changes to the last page.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:pagenext",
              "description": "Fires the event when the grid changes to the next page.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:pageprev",
              "description": "Fires the event when the grid changes to the previous page.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:pagesizechange",
              "description": "Fires the event when the `page-size` (amount of rows displaying) changes on the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:ready",
              "description": "Fires the grid ready event when grid is ready.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:refresh",
              "description": "Fires the event when the grid is refreshed through grid controls or API method `refresh()`.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:render",
              "description": "Fires the event once when grid renders.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:scroll",
              "description": "Fires the event when scrolling occurs in grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:search",
              "description": "Fires the event when a the grid is searched.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:select",
              "description": "Fires the event when selection is made in the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:selectall",
              "description": "Fires the event when selecting every cell (ctrl+a) in the grid.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "grid:sort",
              "description": "Fires the event when a the grid is sorted",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "header:click",
              "description": "Fires event when click on a header cell.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "menu-item:click",
              "description": "Fires the event when custom menu item is clicked.",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "record:click",
              "description": "Fires the `row:click` and `record:click` event when a click occurs on a record (row).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "record:mouseout",
              "description": "Fires when the mouse cursor leaves the record (row).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "record:mouseover",
              "description": "Fires when the mouse cursor enter the record (row).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "row:click",
              "description": "Fires the `row:click` and `record:click` event when a click occurs on a record (row).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "row:frozen",
              "description": "Fires when the frozen row state changes",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "row:mouseout",
              "description": "Fires the event when mouse is moved out a record (row).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "row:mouseover",
              "description": "Fires the event when mouse is moved over a record (row).",
              "type": {
                "text": "Event"
              }
            },
            {
              "name": "row:select",
              "description": "Fires when the row selector changes",
              "type": {
                "text": "Event"
              }
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "calculate",
              "description": "Calculates aggregate values",
              "parameters": [
                {
                  "name": "method",
                  "optional": false,
                  "description": "The method to calculate.  Options are 'sum', 'avg', 'min', 'max', and 'count'",
                  "type": "string"
                },
                {
                  "name": "options",
                  "optional": false,
                  "description": "The options to be used in calculating the value.  Currently fieldIndex is only option.",
                  "type": "any"
                },
                {
                  "name": "data",
                  "optional": false,
                  "description": "The data to calculate the value on.  If this is not set, it uses the grids full dataset",
                  "type": "any[]"
                }
              ],
              "return": {
                "type": "string",
                "description": "The calculated value or empty string if the parameters don't make sense"
              }
            },
            {
              "kind": "method",
              "name": "cell",
              "description": "Fetches the targeted cell.",
              "parameters": [
                {
                  "name": "rowContainerIndex",
                  "optional": false,
                  "description": "The index of the row to fetch.",
                  "type": "number"
                },
                {
                  "name": "columnContainerIndex",
                  "optional": false,
                  "description": "The index of the column fetch.",
                  "type": "number"
                }
              ],
              "return": {
                "type": "any",
                "description": "Cell object."
              }
            },
            {
              "kind": "method",
              "name": "clearState",
              "description": "Clears the grid state",
              "parameters": false
            },
            {
              "kind": "method",
              "name": "closeContextMenu",
              "description": "Closes currently opened contextmenu.",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "closeDialog",
              "description": "Closes currently opened dialogs",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "column",
              "description": "Fetches the targeted column.",
              "parameters": [
                {
                  "name": "fieldIndex",
                  "optional": false,
                  "description": "Field index of column to fetch.",
                  "type": "any[]"
                }
              ],
              "return": {
                "type": "any",
                "description": "Column object."
              }
            },
            {
              "kind": "method",
              "name": "customizeDialog",
              "description": "Customizes the user's dialog",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "The type of dialog to customize.  If you set as null, the config will be applied to all dialogs. Options are: <ul> <li>record-create <li>record-delete <li>record-info <li>record-update <li>view-error <li>view-info <li>view-success <li>view-warn <li>zg-version </ul>",
                  "type": "string"
                },
                {
                  "name": "config",
                  "optional": false,
                  "description": "Options for the data retrieval.  Options are: <ul> <li>cancel: Text for the Cancel Button <li>confirm: Text for the Confirm Button <li>title: The Title to display on the Dialog </ul>",
                  "type": "any"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "executeOnLoad",
              "description": "Executes callback function when grid completes load. If grid is already loaded, it will execute immediately.",
              "parameters": [
                {
                  "name": "callback",
                  "optional": false,
                  "description": "Callback function to execute",
                  "type": "function"
                }
              ],
              "return": {
                "type": "undefined",
                "description": "N/A"
              }
            },
            {
              "kind": "method",
              "name": "filterColumn",
              "description": "Filters the column specified by column index. Note: `filter` attribute must be present for this method to work.",
              "parameters": [
                {
                  "name": "columnIndex",
                  "optional": false,
                  "description": "Index of column.",
                  "type": "string"
                },
                {
                  "name": "filter",
                  "optional": false,
                  "description": "Filter string.",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "firstPage",
              "description": "Navigates to first page in the grid",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "formatDate",
              "description": "Formats a Date",
              "parameters": [
                {
                  "name": "date",
                  "optional": false,
                  "description": "The Date to format",
                  "type": "string | Date"
                },
                {
                  "name": "format",
                  "optional": false,
                  "description": "The tokenized format to format the date",
                  "type": "string"
                }
              ],
              "return": {
                "type": "string",
                "description": "The formatted date"
              }
            },
            {
              "kind": "method",
              "name": "fromNow",
              "description": "Formats a Date in from now format",
              "parameters": [
                {
                  "name": "date",
                  "optional": false,
                  "description": "The Date to format",
                  "type": "Date"
                },
                {
                  "name": "raw",
                  "optional": false,
                  "description": "Indicates if we should include 'ago/to' to indicate past/future",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "string",
                "description": "The formatted date"
              }
            },
            {
              "kind": "method",
              "name": "getCaption",
              "description": "Gets the value of the `caption` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of attribute"
              }
            },
            {
              "kind": "method",
              "name": "getCellBreak",
              "description": "Get the value of the `cell-break` attribute.",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute."
              }
            },
            {
              "kind": "method",
              "name": "getCellClass",
              "description": "Gets the value of the `cell-class` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getCells",
              "description": "Fetches all cells",
              "parameters": false,
              "return": {
                "type": "any[]",
                "description": "Cell objects"
              }
            },
            {
              "kind": "method",
              "name": "getColClass",
              "description": "Gets the value of the `col-class` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getColumnDrag",
              "description": "Gets the value of the `column-drag` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getColumnDragAction",
              "description": "Gets the value of the `column-drag-action` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getColumnsControl",
              "description": "Gets the value of the `columns-control` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getCompact",
              "description": "Gets the value of the `compact` attribute",
              "parameters": false,
              "return": {
                "type": "string | boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getContextMenu",
              "description": "Gets the value of the `context-menu` attribute",
              "parameters": false,
              "return": {
                "type": "string | boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getCreator",
              "description": "Gets the value of the `creator` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getData",
              "description": "Fetches the internal property referencing the dataset for the grid",
              "parameters": [
                {
                  "name": "config",
                  "optional": true,
                  "description": "Optional, options for the data retrieval.  Options are: <ul> <li>csv: Boolean indicating if it should be sent as a csv string.  Default is false.</li> <li>headers: Boolean indicating if headers should be included.  Default is false.              Only applies to csv or JSON array of arrays as JSON objects  have a key already.</li> <li>cols: String indicating if we should return all columns or only visible.  'all' or 'visible' are options. <li>rows: String indicating if we should return all rows or only filtered/searched.  'all' or 'visible' are options. </ul>",
                  "type": "any"
                }
              ],
              "return": {
                "type": "any",
                "description": "The dataset."
              }
            },
            {
              "kind": "method",
              "name": "getDefaultDisplay",
              "description": "Gets the value of the `default-display` attribute",
              "parameters": false,
              "return": {
                "type": "string | boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getDir",
              "description": "Gets the dir setting for the grid",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of dir"
              }
            },
            {
              "kind": "method",
              "name": "getEditor",
              "description": "Gets the value of the `editor` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getEditorControls",
              "description": "Gets the value of the `editor-controls` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFilter",
              "description": "Gets the value of the `filter` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFootClass",
              "description": "Gets the value of the `foot-class` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFrozenColumnsLeft",
              "description": "Gets the value of the `frozen-columns-left` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFrozenColumnsRight",
              "description": "Gets the value of the `frozen-columns-right` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFrozenRowClass",
              "description": "Gets the value of the `frozen-row-class` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFrozenRowsBottom",
              "description": "Gets the value of the `frozen-rows-bottom` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getFrozenRowsTop",
              "description": "Gets the value of the `frozen-rows-top` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getGridlines",
              "description": "Gets the value of the `gridlines` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getGroupBy",
              "description": "Gets the indexes of the current row groupings.  Returns false if none",
              "parameters": false,
              "return": {
                "type": "string | boolean",
                "description": "Index value of the row-group or false if none."
              }
            },
            {
              "kind": "method",
              "name": "getHeadClass",
              "description": "Gets the value of the `head-class` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getHeaderAutoFormat",
              "description": "Gets the value of the `header-auto-format` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getHeight",
              "description": "Gets the value of the `height` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getIconSet",
              "description": "Gets the value of the `icon-set` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getLang",
              "description": "Gets the language used on the grid",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getLayout",
              "description": "Gets the value of the `layout` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getLayoutControls",
              "description": "Gets the value of the `layout-controls` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getNestedDataSeparator",
              "description": "Gets the value of the `nested-data-separator` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getNodata",
              "description": "Gets the value of the `no-data` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPageIndex",
              "description": "Gets the current page. Does not apply to cursor paging.",
              "parameters": false,
              "return": {
                "type": "number",
                "description": "Page index"
              }
            },
            {
              "kind": "method",
              "name": "getPageSize",
              "description": "Gets the current `page-size`",
              "parameters": false,
              "return": {
                "type": "number",
                "description": "Page size"
              }
            },
            {
              "kind": "method",
              "name": "getPageSizeCard",
              "description": "Gets the value of the `page-size-card` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPageSizeRow",
              "description": "Gets the value of the `page-size-row` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPager",
              "description": "Gets the value of the `pager` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPreserveStateId",
              "description": "Gets the value of the `preserve-state-id` attribute",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPreserveStateLoad",
              "description": "Gets the value of the `preserve-state-load` attribute",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPreserveStateOptions",
              "description": "Gets the value of the `preserve-state-options` attribute",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getPreserveStateSave",
              "description": "Gets the value of the `preserve-state-save` attribute",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getRecordDuplicate",
              "description": "Gets the value of the `record-duplicate` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getRowClass",
              "description": "Gets the value of the `row-class` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getRowSelector",
              "description": "Gets the value of the `row-selector` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getSearch",
              "description": "Gets the value of the `search` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getSelectedRows",
              "description": "Returns an array of selected rows",
              "parameters": false,
              "return": {
                "type": "any[]",
                "description": "Selected Data"
              }
            },
            {
              "kind": "method",
              "name": "getSelector",
              "description": "Gets the value of the `selector` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of attribute"
              }
            },
            {
              "kind": "method",
              "name": "getSort",
              "description": "Gets the value of the `sort` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getSorter",
              "description": "Gets the value of the `sorter` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getSource",
              "description": "Gets the value of the `source` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute."
              }
            },
            {
              "kind": "method",
              "name": "getSrc",
              "description": "Gets the value of the `src` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of attribute"
              }
            },
            {
              "kind": "method",
              "name": "getStaticMenu",
              "description": "Gets the value of the `static-menu` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of attribute"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateEndDelimiter",
              "description": "Gets the value of the `template-end-delimiter` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getTemplateStartDelimiter",
              "description": "Gets the value of the `template-start-delimiter` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getTheme",
              "description": "Gets the value of the `theme` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of attribute"
              }
            },
            {
              "kind": "method",
              "name": "getViewport",
              "description": "Gets the value of the `viewport` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getViewportPause",
              "description": "Gets the value of the `viewport-pause` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getViewportStop",
              "description": "Gets the value of the `viewport-stop` attribute",
              "parameters": false,
              "return": {
                "type": "boolean",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getViewportTypes",
              "description": "Gets the value of the `viewport-types` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getWidth",
              "description": "Gets the value of the `width` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "getZebra",
              "description": "Gets the value of the `zebra` attribute",
              "parameters": false,
              "return": {
                "type": "string",
                "description": "Value of the attribute"
              }
            },
            {
              "kind": "method",
              "name": "hideColumn",
              "description": "Hides a column based on index",
              "parameters": [
                {
                  "name": "columnIndex",
                  "optional": false,
                  "description": "Index of column to hide",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "insertRow",
              "description": "Inserts a new row into the grid",
              "parameters": [
                {
                  "name": "data",
                  "optional": false,
                  "description": "Data to insert into new row",
                  "type": "any"
                },
                {
                  "name": "id",
                  "optional": false,
                  "description": "If the id is already set on the new record, pass it in here",
                  "type": "string"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to do a local insert, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "lastPage",
              "description": "Navigates to the last page in the grid",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "nextPage",
              "description": "Navigates to the next page in the grid",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "openRowEditor",
              "description": "Opens specified row in edit mode if editing is allowed",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "prevPage",
              "description": "Navigates to the previous page in the grid",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "refresh",
              "description": "Refreshes all cells. Note: if using static data, original cell value will be restored.",
              "parameters": false,
              "return": {
                "type": "undefined",
                "description": "N/A"
              }
            },
            {
              "kind": "method",
              "name": "refreshGrid",
              "description": "Refreshes entire grid.  Useful for language change.",
              "parameters": false,
              "return": {
                "type": "undefined",
                "description": "N/A"
              }
            },
            {
              "kind": "method",
              "name": "removeRecord",
              "description": "Removes a record from the grid",
              "parameters": [
                {
                  "name": "id",
                  "optional": false,
                  "description": "ID of the record to remove",
                  "type": "string"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to remove from the grid and not the external datasource, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "removeRow",
              "description": "Removes a row from the grid",
              "parameters": [
                {
                  "name": "rowIndex",
                  "optional": false,
                  "description": "Row index (0 based) of the record to remove",
                  "type": "string"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to remove from the grid and not the external datasource, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "row",
              "description": "Fetches the targeted row.",
              "parameters": [
                {
                  "name": "rowContainerIndex",
                  "optional": false,
                  "description": "The index of the row to fetch.",
                  "type": "number"
                }
              ],
              "return": {
                "type": "any",
                "description": "Row object."
              }
            },
            {
              "kind": "method",
              "name": "searchGrid",
              "description": "Searches the grid with the search term indicated",
              "parameters": [
                {
                  "name": "search",
                  "optional": false,
                  "description": "Search term",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "description": "Selects one or more cells",
              "parameters": [
                {
                  "name": "rowIndex",
                  "optional": false,
                  "description": "Row of cell to select",
                  "type": "string"
                },
                {
                  "name": "colIndex",
                  "optional": false,
                  "description": "Column of cell to select",
                  "type": "string"
                },
                {
                  "name": "endRowIndex",
                  "optional": true,
                  "description": "Optional end cell row for multi-cell selection",
                  "type": "string"
                },
                {
                  "name": "endColIndex",
                  "optional": true,
                  "description": "Optional end cell column for multi-cell selection",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setCaption",
              "description": "Set the caption text",
              "parameters": [
                {
                  "name": "sCaption",
                  "optional": false,
                  "description": "Text to set the caption to. If no string is passed, it will remove the caption.",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setCardTemplate",
              "description": "Sets the id to reference an external `template` to be used as `<zg-card>`",
              "parameters": [
                {
                  "name": "id",
                  "optional": false,
                  "description": "Value of id to use the card template.",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setCellBreak",
              "description": "Sets the `cell-break` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Type of cell-break",
                  "type": "'all' | 'ellipsis' | 'word'"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setCellClass",
              "description": "Sets the `cell-class` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setColClass",
              "description": "Sets the `col-class` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setColumnDrag",
              "description": "Sets the `column-drag` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Boolean value to indicate add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setColumnDragAction",
              "description": "Sets the `column-drag-action` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Type of drag to enable",
                  "type": "'reorder' | 'remove' | 'both'"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setColumns",
              "description": "Sets the `columns` property",
              "parameters": [
                {
                  "name": "columns",
                  "optional": false,
                  "description": "Array of column objects",
                  "type": "any[]"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setColumnsControl",
              "description": "Sets the `columns-control` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setCompact",
              "description": "Sets the `compact` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setContextMenu",
              "description": "Sets the `context-menu` attribute.",
              "parameters": [
                {
                  "name": "types",
                  "optional": false,
                  "description": "Boolean value to indicate add or remove, or string value to indicate reference to id of context-menu.",
                  "type": "boolean | string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setCreator",
              "description": "Sets the `creator` attribute",
              "parameters": [
                {
                  "name": "sMode",
                  "optional": false,
                  "description": "Value of the creator mode",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setData",
              "description": "Sets or updates the dataset for the grid",
              "parameters": [
                {
                  "name": "data",
                  "optional": false,
                  "description": "JSON data",
                  "type": "any"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setDefaultDisplay",
              "description": "Sets the `default-display` attribute",
              "parameters": [
                {
                  "name": "value",
                  "optional": false,
                  "description": "Value to use as default cell display if data is undefined or null",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setDir",
              "description": "Sets the `dir` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Type of dir",
                  "type": "'ltr' | 'rtl'"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setEditor",
              "description": "Sets the `editor` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Boolean value to indicate add or remove, or string value to indicate the editor type",
                  "type": "boolean | string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setEditorControls",
              "description": "Sets the `editor-controls` attribute",
              "parameters": [
                {
                  "name": "types",
                  "optional": false,
                  "description": "Boolean value to indicate add or remove, or string value to indicate what editor controls to add",
                  "type": "boolean | string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFilter",
              "description": "Sets the `filter` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFootClass",
              "description": "Sets the `foot-class` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFrozenColumnsLeft",
              "description": "Sets the `frozen-columns-left` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "The number of columns to freeze to the left",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFrozenColumnsRight",
              "description": "Sets the `frozen-columns-right` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "The number of columns to freeze to the right",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFrozenRowClass",
              "description": "Sets the `frozen-row-class` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFrozenRowsBottom",
              "description": "Sets the `frozen-rows-bottom` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "The number of rows to freeze to the bottom",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setFrozenRowsTop",
              "description": "Sets the `frozen-rows-top` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "The number of rows to freeze to the top",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setGridlines",
              "description": "Sets the `gridlines` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Type of gridlines to set on the grid",
                  "type": "'both' | 'horz' | 'horizontal' | 'vert' | 'vertical'"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setGroupBy",
              "description": "Sets the `group-by` attribute",
              "parameters": [
                {
                  "name": "index",
                  "optional": false,
                  "description": "Index to set the group-by",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setHeadClass",
              "description": "Sets the `head-class` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setHeaderAutoFormat",
              "description": "Sets the `header-auto-format` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setHeight",
              "description": "Sets the `height` attribute",
              "parameters": [
                {
                  "name": "height",
                  "optional": false,
                  "description": "Value setting the height of the grid",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setIconSet",
              "description": "Sets the `icon-set` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Icon set to use in the grid",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setLang",
              "description": "Sets the `lang` attribute",
              "parameters": [
                {
                  "name": "lang",
                  "optional": false,
                  "description": "Language to set on the grid",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setLayout",
              "description": "Sets the `layout` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Value to indicate the grid layout",
                  "type": "'row' | 'card'"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setLayoutControls",
              "description": "Sets the `layout-controls` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setNestedDataSeparator",
              "description": "Sets the `nested-data-separator` attribute",
              "parameters": [
                {
                  "name": "separator",
                  "optional": false,
                  "description": "The separator value",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setNoData",
              "description": "Sets the `no-data` attribute",
              "parameters": [
                {
                  "name": "value",
                  "optional": false,
                  "description": "Message to display when there is no data",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPageIndex",
              "description": "Changes the current page index to be the specified value",
              "parameters": [
                {
                  "name": "pageIndex",
                  "optional": false,
                  "description": "New page index",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPageSize",
              "description": "Changes the current page size to be the specified value",
              "parameters": [
                {
                  "name": "pageSize",
                  "optional": false,
                  "description": "New page size",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPageSizeCard",
              "description": "Changes the current page size to be the specified value in card mode",
              "parameters": [
                {
                  "name": "pageSize",
                  "optional": false,
                  "description": "New card page size",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPageSizeOptions",
              "description": "Sets the page size options for the pager drop down",
              "parameters": [
                {
                  "name": "options",
                  "optional": false,
                  "description": "Comma separated list of numerical page sizes",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPageSizeRow",
              "description": "Changes the current page size to be the specified value in row mode",
              "parameters": [
                {
                  "name": "pageSize",
                  "optional": false,
                  "description": "New row page size",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPager",
              "description": "Sets the `pager` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPreserveStateId",
              "description": "Sets the `preserve-state-id` attribute",
              "parameters": [
                {
                  "name": "id",
                  "optional": false,
                  "description": "Value setting the id",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPreserveStateLoad",
              "description": "Sets the `preserve-state-load` attribute as a reference of the user defined method to call on state load",
              "parameters": [
                {
                  "name": "functionName",
                  "optional": false,
                  "description": "Value setting the function",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPreserveStateOptions",
              "description": "Sets the `preserve-state-options` attribute as a comma separated string of the options",
              "parameters": [
                {
                  "name": "options",
                  "optional": false,
                  "description": "Value setting the options",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setPreserveStateSave",
              "description": "Sets the `preserve-state-save` attribute as a reference of the user defined method to call on state save",
              "parameters": [
                {
                  "name": "functionName",
                  "optional": false,
                  "description": "Value setting the function",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setRecordCount",
              "description": "Sets the `record-count` attribute",
              "parameters": [
                {
                  "name": "count",
                  "optional": false,
                  "description": "Value setting the count",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setRecordDuplicate",
              "description": "Sets the `record-duplicate` attribute",
              "parameters": [
                {
                  "name": "duplicate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setRowClass",
              "description": "Sets the `row-class` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setRowSelector",
              "description": "Sets the `row-selector` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setSearch",
              "description": "Sets the `search` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setSelector",
              "description": "Sets the `selector` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setSort",
              "description": "Sets the `sort` attribute",
              "parameters": [
                {
                  "name": "types",
                  "optional": false,
                  "description": "Boolean value to indicate add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setSorter",
              "description": "Sets the `sorter` attribute",
              "parameters": [
                {
                  "name": "types",
                  "optional": false,
                  "description": "String value to indicate reference to custom sorter function",
                  "type": "boolean | string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setSource",
              "description": "Sets the `source` attribute. Not to be confused with `src` attribute, the `source` attribute is for citation.",
              "parameters": [
                {
                  "name": "value",
                  "optional": false,
                  "description": "Source of the data in the grid",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setSrc",
              "description": "Sets the `src` attribute",
              "parameters": [
                {
                  "name": "src",
                  "optional": false,
                  "description": "Value to indicate a path to a remote data source",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setState",
              "description": "Sets the grid state with the options passed in",
              "parameters": [
                {
                  "name": "state",
                  "optional": false,
                  "description": "JSON string or object setting the state",
                  "type": "string"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setStateField",
              "description": "Sets the grid state for the given field",
              "parameters": [
                {
                  "name": "stateName",
                  "optional": false,
                  "description": "Name of the state to set",
                  "type": "string"
                },
                {
                  "name": "state",
                  "optional": false,
                  "description": "String, JSON string or object setting the state",
                  "type": "string"
                }
              ]
            },
            {
              "kind": "method",
              "name": "setStaticMenu",
              "description": "Sets the `static-menu` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setTemplateEndDelimiter",
              "description": "Sets the `template-end-delimiter` attribute",
              "parameters": [
                {
                  "name": "delim",
                  "optional": false,
                  "description": "Value to indicate regex expression for closing data binding",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setTemplateStartDelimiter",
              "description": "Sets the `template-start-delimiter` attribute",
              "parameters": [
                {
                  "name": "delim",
                  "optional": false,
                  "description": "Value to indicate regex expression for opening data binding",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setTheme",
              "description": "Sets the `theme` attribute",
              "parameters": [
                {
                  "name": "theme",
                  "optional": false,
                  "description": "Value to indicate which theme to set",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setViewportPause",
              "description": "Sets the `viewport-pause` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setViewportStop",
              "description": "Sets the `viewport-stop` attribute",
              "parameters": [
                {
                  "name": "activate",
                  "optional": false,
                  "description": "Value to add or remove",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setWidth",
              "description": "Sets the `width` attribute",
              "parameters": [
                {
                  "name": "width",
                  "optional": false,
                  "description": "Value setting the width of the grid",
                  "type": "number"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "setZebra",
              "description": "Sets the `zebra` attribute",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "Class name or function name",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "showColumn",
              "description": "Sets column to be visible",
              "parameters": [
                {
                  "name": "columnIndex",
                  "optional": false,
                  "description": "Index of column to show",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "sortColumn",
              "description": "Sorts the given column with the given sort direction",
              "parameters": [
                {
                  "name": "columnIndex",
                  "optional": false,
                  "description": "Index of column to sort",
                  "type": "string"
                },
                {
                  "name": "direction",
                  "optional": false,
                  "description": "Sort Direction: asc, desc, or none",
                  "type": "string"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "toggleColumn",
              "description": "Toggles the visibility of a column by index",
              "parameters": [
                {
                  "name": "columnIndex",
                  "optional": false,
                  "description": "Index of column to toggle",
                  "type": "string"
                },
                {
                  "name": "hide",
                  "optional": false,
                  "description": "Visibility of column",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "updateCellByID",
              "description": "Updates a cell in the grid",
              "parameters": [
                {
                  "name": "id",
                  "optional": false,
                  "description": "ID of the record to update",
                  "type": "number"
                },
                {
                  "name": "fieldIndex",
                  "optional": false,
                  "description": "Field index of the cell to update",
                  "type": "number"
                },
                {
                  "name": "val",
                  "optional": false,
                  "description": "New Value",
                  "type": "any"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to update the grid and not the external datasource, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "updateCellByPosition",
              "description": "Updates a cell in the grid",
              "parameters": [
                {
                  "name": "rowIndex",
                  "optional": false,
                  "description": "Row index (0 based) of the cell to update",
                  "type": "number"
                },
                {
                  "name": "columnIndex",
                  "optional": false,
                  "description": "Column index (0 based) of the cell to update",
                  "type": "number"
                },
                {
                  "name": "val",
                  "optional": false,
                  "description": "New Value",
                  "type": "any"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to update the grid and not the external datasource, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "updateRecord",
              "description": "Updates a record in the grid",
              "parameters": [
                {
                  "name": "id",
                  "optional": false,
                  "description": "ID of the record to update",
                  "type": "string"
                },
                {
                  "name": "data",
                  "optional": false,
                  "description": "Data to update",
                  "type": "any"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to update the grid and not the external datasource, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "updateRow",
              "description": "Updates a row in the grid",
              "parameters": [
                {
                  "name": "rowIndex",
                  "optional": false,
                  "description": "Row index (0 based) of the record to update",
                  "type": "string"
                },
                {
                  "name": "data",
                  "optional": false,
                  "description": "Data to update",
                  "type": "any"
                },
                {
                  "name": "noDataSource",
                  "optional": false,
                  "description": "If you only want to update the grid and not the external datasource, set `noDataSource` to \"true\"",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "updateSize",
              "description": "Forces a resize event to be triggered and to partially repaint the grid. Useful when the container updates size without the window updating.",
              "parameters": false,
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            }
          ],
          "slots": [
            {
              "name": "",
              "description": "Grid content or configuration that accepts `<zg-*>` elements that are allowed to be manually inserted."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZingGrid",
          "declaration": {
            "name": "ZingGrid",
            "module": "zinggrid-lib/src/js/components/zing-grid/ZingGrid.js"
          }
        },
        {
          "kind": "custom-element-definition",
          "name": "zing-grid",
          "declaration": {
            "name": "ZingGrid",
            "module": "zinggrid-lib/src/js/components/zing-grid/ZingGrid.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "zinggrid-lib/src/js/ZingGrid.js",
      "declarations": [
        {
          "kind": "class",
          "description": "ZingGrid instance",
          "members": [
            {
              "kind": "method",
              "name": "customizeDialog",
              "description": "Customizes the user's dialog for all instances of ZingGrid",
              "parameters": [
                {
                  "name": "type",
                  "optional": false,
                  "description": "The type of dialog to customize.  If you set as null, the config will be applied to all dialogs. Options are: <ul> <li>record-create <li>record-delete <li>record-info <li>record-update <li>view-error <li>view-info <li>view-success <li>view-warn <li>zg-version </ul>",
                  "type": "string"
                },
                {
                  "name": "config",
                  "optional": false,
                  "description": "Options for the data retrieval.  Options are: <ul> <li>cancel: Text for the Cancel Button <li>confirm: Text for the Confirm Button <li>label: Label to display on the Dialog </ul>",
                  "type": "any"
                }
              ],
              "return": {
                "type": "ZingGrid",
                "description": "Returns the component so that you can chain methods together"
              }
            },
            {
              "kind": "method",
              "name": "formatDate",
              "description": "Formats a Date",
              "parameters": [
                {
                  "name": "date",
                  "optional": false,
                  "description": "The Date to format",
                  "type": "string | Date"
                },
                {
                  "name": "format",
                  "optional": false,
                  "description": "The tokenized format to format the date",
                  "type": "string"
                },
                {
                  "name": "locale",
                  "optional": true,
                  "description": "The locale to use for the formatting.  Optional.",
                  "type": "string"
                }
              ],
              "return": {
                "type": "string",
                "description": "Formatted date"
              }
            },
            {
              "kind": "method",
              "name": "fromNow",
              "description": "Formats a Date in from now format",
              "parameters": [
                {
                  "name": "date",
                  "optional": false,
                  "description": "The Date to format",
                  "type": "Date"
                },
                {
                  "name": "raw",
                  "optional": false,
                  "description": "Indicates if we should include 'ago/to' to indicate past/future",
                  "type": "boolean"
                }
              ],
              "return": {
                "type": "string",
                "description": "Formatted date from now"
              }
            },
            {
              "kind": "method",
              "name": "registerAdapter",
              "description": "Register a method to make connecting a remote data src to your grid even easier. If you have your own standardized endpoints this is very useful. A way for us to provide an ES6 style import  mechanism and pattern for building custom data sources.",
              "parameters": [
                {
                  "name": "sType",
                  "optional": false,
                  "description": "The string name for the adapter",
                  "type": "string"
                },
                {
                  "name": "oOptions",
                  "optional": false,
                  "description": "Option list of of adapter variables you want to define. You can define ANY zg-param name value pair here in this option. Refer to the Store.js variable this.oDefaultDataFormat",
                  "type": "any"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerCellType",
              "description": "Register a custom column type to reduce redundant markup and re-use similar code.",
              "parameters": [
                {
                  "name": "sType",
                  "optional": false,
                  "description": "Name of cell type.",
                  "type": "string"
                },
                {
                  "name": "oOptions",
                  "optional": false,
                  "description": "An object to define the renderer and/or editor for the cell type.",
                  "type": "any"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerEditor",
              "description": "Register the life cycle hooks for cell editing. This allows you to import and inherit editors for your library.",
              "parameters": [
                {
                  "name": "sCellType",
                  "optional": false,
                  "description": "Cell type editor to override",
                  "type": "string"
                },
                {
                  "name": "oConfig",
                  "optional": false,
                  "description": "Object containing editor hooks",
                  "type": "any"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerMethod",
              "description": "Register a method to make it available to ZingGrid even if it outside the window scope. This can be used to make a method accessible to renderer, editor, sorter, and custom styles This is useful for methods within a class or local methods.",
              "parameters": [
                {
                  "name": "method",
                  "optional": false,
                  "description": "The method that you wish to expose to ZingGrid.",
                  "type": "function"
                },
                {
                  "name": "name",
                  "optional": true,
                  "description": "The name to refer to the method.  If the method is not anonymous, the name will default to the name of the method.  If it is anonymous, a name must be set.  Whatever is set here is how you should refer to the method in the grid. Optional.",
                  "type": "string"
                },
                {
                  "name": "scope",
                  "optional": true,
                  "description": "The scope of the method.  When the method is called `this` will be set to the `scope` value. Optional.",
                  "type": "any"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerNamespace",
              "description": "Register a namespace to make it available to ZingGrid even if it outside the window scope. Once a namespace is registered, the methods within the namespace will be accessible to ZingGrid without having to call `ZingGrid.registerMethod`",
              "parameters": [
                {
                  "name": "namespace",
                  "optional": false,
                  "description": "The namespace that you wish to expose to ZingGrid.",
                  "type": "function"
                },
                {
                  "name": "name",
                  "optional": true,
                  "description": "The name to refer to the namespace. Optional.",
                  "type": "string"
                },
                {
                  "name": "scope",
                  "optional": true,
                  "description": "The scope of the namespace.  When a method within the namespace is called, `this` will be set to the `scope` value. Defaults to the namespace itself. Optional.",
                  "type": "any"
                }
              ]
            },
            {
              "kind": "method",
              "name": "registerValidator",
              "description": "Register the life cycle hooks for cell validation. This allows you to import and inherit validators for your library.",
              "parameters": [
                {
                  "name": "oValidator",
                  "optional": false,
                  "description": "The validator that you wish to expose to ZingGrid.",
                  "type": "any"
                },
                {
                  "name": "name",
                  "optional": true,
                  "description": "The name to refer to the validator. Optional.",
                  "type": "string"
                },
                {
                  "name": "scope",
                  "optional": true,
                  "description": "The scope of the method.  When the method is called `this` will be set to the `scope` value. Optional.",
                  "type": "any"
                }
              ]
            },
            {
              "kind": "method",
              "name": "searchIsTable",
              "description": "Searches for table element(s) with the `[is=\"zing-grid\"]` attribute to insert the zing-grid. This method should only be used when `table[is=\"zing-grid\"]` is added after the Document has been loaded.",
              "parameters": false
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ZingGrid",
          "declaration": {
            "name": "ZingGrid",
            "module": "zinggrid-lib/src/js/ZingGrid.js"
          }
        }
      ]
    }
  ]
}